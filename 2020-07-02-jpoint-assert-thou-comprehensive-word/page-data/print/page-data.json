{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","webpackCompilationHash":"82f9293ef06b6bcfa6da","result":{"data":{"deck":{"id":"5cb7ac37-dbfb-5793-9839-6db6c719bd7b","body":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar rnd = function rnd() {\n  return new xorshift.constructor([673967201, 30555176, 3277234396, 3961216775]);\n};\n\nPrism.languages.none = {};\nPrism.languages.diff2 = Prism.languages.diff;\nvar themes = current_themes;\nvar clrRed = \"salmon\";\nvar clrBlue = \"rgb(93, 123, 197)\";\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  themes: themes,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Image //src=\"https://images.unsplash.com/photo-1532153955177-f59af40d6472?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1234&q=80\"\n  , {\n    alt: \"book\",\n    src: \"https://images.unsplash.com/photo-1528741220605-c78096c257de?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1068&q=80\",\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      color: 'white',\n      backgroundColor: 'black'\n    },\n    mdxType: \"Image\"\n  }, mdx(\"h1\", null, \"assert, \\u043A\\u0430\\u043A \\u043C\\u043D\\u043E\\u0433\\u043E \\u0432 \\u044D\\u0442\\u043E\\u043C \\u0441\\u043B\\u043E\\u0432\\u0435\")), mdx(\"hr\", null), mdx(\"p\", null, \"\\u0412\\u043B\\u0430\\u0434\\u0438\\u043C\\u0438\\u0440 \\u0421\\u0438\\u0442\\u043D\\u0438\\u043A\\u043E\\u0432\"), mdx(\"p\", null, \"Performance engineer\\nNetcracker\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/VladimirSitnikv\"\n  }), \"@VladimirSitnikv\")), mdx(\"a\", {\n    href: \"mailto:sitnikov.vladimir@gmail.com\"\n  }, \"sitnikov.vladimir@gmail.com\"), mdx(\"hr\", null), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u042F \\u043A\\u043E\\u0434 \\u043F\\u0438\\u0448\\u0443 \\u2014 \\u0447\\u0435\\u0433\\u043E \\u0436\\u0435 \\u0431\\u043E\\u043B\\u0435?\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\u0427\\u0442\\u043E \\u0432\\u044B \\u0445\\u043E\\u0442\\u0438\\u0442\\u0435 \\u043C\\u043D\\u0435 \\u0441\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C?\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\u0422\\u0435\\u043F\\u0435\\u0440\\u044C, \\u044F \\u0437\\u043D\\u0430\\u044E, \\u0442\\u0435\\u0441\\u0442\\u043E\\u0432 \\u043C\\u043E\\u0440\\u0435\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\u041C\\u0435\\u043D\\u044F \\u0437\\u0430\\u0441\\u0442\\u0430\\u0432\\u044F\\u0442 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u0442\\u044C :(\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u0422\\u0430\\u043A \\u0434\\u0443\\u043C\\u0430\\u043B \\u043C\\u043E\\u043B\\u043E\\u0434\\u043E\\u0439 \\u043F\\u043E\\u0432\\u0435\\u0441\\u0430,\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\u0421\\u0442\\u0440\\u043E\\u0447\\u0430 \\u0432 IDEA \\u0441\\u0438\\u043D\\u0433\\u043B\\u0442\\u043E\\u043D\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\u0412\\u0441\\u0435\\u0432\\u044B\\u0448\\u043D\\u0435\\u0439 \\u0432\\u043E\\u043B\\u0435\\u044E \\u0417\\u0435\\u0432\\u0435\\u0441\\u0430\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\u041F\\u0438\\u0441\\u0430\\u0442\\u044C \\u043D\\u0430 Java \\u043F\\u0440\\u0438\\u0437\\u0432\\u0430\\u043D \\u043E\\u043D  \")), mdx(\"p\", null, \"\\u2014 \\u0410. \\u0421. \\u041F\\u0443\\u0448\\u043A\\u0438\\u043D\"), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u0410 \\u0437\\u0430\\u0447\\u0435\\u043C \\u043D\\u0443\\u0436\\u043D\\u044B \\u0442\\u0435\\u0441\\u0442\\u044B?\"), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u0412\\u0441\\u0435 \\u0436\\u0435 \\u043F\\u0438\\u0448\\u0443\\u0442 \\u0442\\u0435\\u0441\\u0442\\u044B?\", mdx(\"br\", null), \"\\uD83D\\uDE1C\"), mdx(\"hr\", null), mdx(\"h2\", null, \"\\u041A\\u043E\\u0433\\u0434\\u0430 \\u0433\\u043E\\u0432\\u043E\\u0440\\u044F\\u0442 \\u043E \\u0442\\u0435\\u0441\\u0442\\u0430\\u0445?\"), mdx(Steps, {\n    mdxType: \"Steps\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u041D\\u0430 \\u043A\\u043E\\u043D\\u0444\\u0435\\u0440\\u0435\\u043D\\u0446\\u0438\\u044F\\u0445\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u041F\\u0440\\u0438 \\u043F\\u0430\\u0440\\u043D\\u043E\\u043C \\u043F\\u0440\\u043E\\u0433\\u0440\\u0430\\u043C\\u043C\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u0438\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u0412\\u0440\\u0435\\u043C\\u0435\\u043D\\u0438 \\u043D\\u0435\\u0442, \\u0432\\u044B\\u0434\\u0430\\u0434\\u0438\\u043C \\u0441\\u0435\\u0433\\u043E\\u0434\\u043D\\u044F, \\u0430 \\u0442\\u0435\\u0441\\u0442\\u044B \\u2014 \\u0437\\u0430\\u0432\\u0442\\u0440\\u0430\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u041A\\u043E\\u0433\\u0434\\u0430 \\u0442\\u0435\\u0441\\u0442\\u044B \\u043F\\u0430\\u0434\\u0430\\u044E\\u0442\"))), mdx(\"hr\", null), mdx(\"img\", {\n    alt: \"why_bad_tests\",\n    src: why_bad_tests,\n    width: 1231,\n    height: 390\n  }), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://mtlynch.io/good-developers-bad-tests/\"\n  }), \"https://mtlynch.io/good-developers-bad-tests/\")), mdx(\"hr\", null), mdx(Image, {\n    src: img_lamp,\n    mdxType: \"Image\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-none\",\n    \"metastring\": \"view=1:0\",\n    \"view\": \"1:0\"\n  }), \"com.package.SomeClassTest > testPass PASSED\\n\\ncom.package.SomeClassTest > testSkip SKIPPED\\n\\ncom.package.SomeClassTest > testFail FAILED\\n    java.lang.AssertionError: expected:<false> but was:<true>\\n        at org.junit.Assert.fail(Assert.java:88)\\n        at org.junit.Assert.failNotEquals(Assert.java:834)\\n        at org.junit.Assert.assertEquals(Assert.java:118)\\n        at org.junit.Assert.assertEquals(Assert.java:144)\\n        at com.package.SomeClassTest.testFail(SomeClassTest.java:42)\\n\\n3 tests completed, 1 failed, 1 skipped\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5[29:43],6[31:61] view=1:0\",\n    \"5[29:43],6[31:61]\": true,\n    \"view\": \"1:0\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5[29:43],6[31:61],11[38:68] view=1:0\",\n    \"5[29:43],6[31:61],11[38:68]\": true,\n    \"view\": \"1:0\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5[29:43],6[31:61],11[38:68] view=1:0 title=\\\"И почему упало? 🤔\\\"\",\n    \"5[29:43],6[31:61],11[38:68]\": true,\n    \"view\": \"1:0\",\n    \"title\": \"\\\"И\",\n    \"почему\": true,\n    \"упало?\": true,\n    \"🤔\\\"\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\",\n    \"metastring\": \"file=\\\"src/01_iter4.rb\\\" subtitle=\\\" \\\"\",\n    \"file\": \"\\\"src/01_iter4.rb\\\"\",\n    \"subtitle\": \"\\\" \\\"\"\n  }), \"class ITER_TEST3\\n  def foo x\\n    return yield if block_given?\\n    x\\n  end\\nend\\n\\nclass ITER_TEST4 < ITER_TEST3\\n  include Test::Unit::Assertions\\n  def foo x\\n    assert_equal(super, yield)\\n    assert_equal(x, super(x, &nil))\\n  end\\nend\\n\\ndef test_iter4\\n  ITER_TEST4.new.foo(44){55}\\nend\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"subtitle=\\\"ruby/test_iterator.rb\\\"\",\n    \"subtitle\": \"\\\"ruby/test_iterator.rb\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"16[5:14] subtitle=\\\"От создателей test_iter3 и test_iter2\\\"\",\n    \"16[5:14]\": true,\n    \"subtitle\": \"\\\"От\",\n    \"создателей\": true,\n    \"test_iter3\": true,\n    \"и\": true,\n    \"test_iter2\\\"\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(\"img\", {\n    alt: \"Ruby spec test\",\n    src: seaton2,\n    width: 1135\n  }), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"https://bugs.openjdk.java.net/browse/JDK-8246261\"\n  }), \"JDK-8246261: TCKLocalTime.java failed due...\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-none\",\n    \"metastring\": \"view=1:0\",\n    \"view\": \"1:0\"\n  }), \"config tck.java.time.TCKLocalTime.setUp(): success\\ntest tck.java.time.TCKLocalTime.now_Clock_nullClock(): success\\nconfig tck.java.time.TCKLocalTime.setUp(): success\\ntest tck.java.time.TCKLocalTime.now_ZoneId(): failure\\njava.lang.AssertionError: expected [18:14:22] but found [18:14:23]\\nat org.testng.Assert.fail(Assert.java:94)\\nat org.testng.Assert.failNotEquals(Assert.java:496)\\nat org.testng.Assert.assertEquals(Assert.java:125)\\nat org.testng.Assert.assertEquals(Assert.java:167)\\nat tck.java.time.TCKLocalTime.now_ZoneId(TCKLocalTime.java:251)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"view=1:0 4[20:53],5[27:66]\",\n    \"view\": \"1:0\",\n    \"4[20:53],5[27:66]\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"view=1:0 4[20:53],5[27:66],10[42:62]\",\n    \"view\": \"1:0\",\n    \"4[20:53],5[27:66],10[42:62]\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Test\\npublic void now_ZoneId() {\\n\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Test\\npublic void now_ZoneId() {\\n  ZoneId zone = ZoneId.of(\\\"UTC+01:02:03\\\");\\n  LocalDateTime expected = LocalDateTime.now(Clock.system(zone));\\n  LocalDateTime test = LocalDateTime.now(zone);\\n\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"view=2:-1\",\n    \"view\": \"2:-1\"\n  }), \"@Test\\npublic void now_ZoneId() {\\n  ZoneId zone = ZoneId.of(\\\"UTC+01:02:03\\\");\\n  LocalDateTime expected = LocalDateTime.now(Clock.system(zone));\\n  LocalDateTime test = LocalDateTime.now(zone);\\n  for (int i = 0; i < 100; i++) {\\n    if (expected.equals(test)) {\\n      return;\\n    }\\n    expected = LocalDateTime.now(Clock.system(zone));\\n    test = LocalDateTime.now(zone);\\n  }\\n\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"2,4[17:64],5[17:46],7,8,13,14\",\n    \"2,4[17:64],5[17:46],7,8,13,14\": true\n  }), \"@Test\\npublic void now_ZoneId() {\\n  ZoneId zone = ZoneId.of(\\\"UTC+01:02:03\\\");\\n  LocalDateTime expected = LocalDateTime.now(Clock.system(zone));\\n  LocalDateTime test = LocalDateTime.now(zone);\\n  for (int i = 0; i < 100; i++) {\\n    if (expected.equals(test)) {\\n      return;\\n    }\\n    expected = LocalDateTime.now(Clock.system(zone));\\n    test = LocalDateTime.now(zone);\\n  }\\n  assertEquals(test.truncatedTo(ChronoUnit.SECONDS),\\n               expected.truncatedTo(ChronoUnit.SECONDS));\\n}\\n\"))), mdx(\"hr\", null), mdx(\"div\", {\n    style: {\n      position: \"absolute\",\n      bottom: \"0em\",\n      zIndex: 100,\n      visibility: useDeck().step > 0 ? 'hidden' : null\n    }\n  }, mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://openjdk.5641.n7.nabble.com/15-RFR-8246261-TCKLocalTime-java-failed-due-to-quot-AssertionError-expected-18-14-22-but-found-18-14-td412678.html\"\n  }), \"core-libs-dev@openjdk.java.net\"))), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-none\",\n    \"metastring\": \"view=1:0\",\n    \"view\": \"1:0\"\n  }), \"The patch looks good to fix the failure. I'm just curious\\nwhether the 100-time comparison is necessary because of\\nthe existence of this assertion outside the loop that allowed\\nthe test to pass if the different was within a certain period of time.\\nNone of the tests had commented on the purpose of the test,\\nit looks like it's testing the assertion that (for the now method)\\n\\\"This will query the system clock to obtain the current time.\\\"\\nThe 100-loop therefore was a compromise for lack of a better way\\nto prove that. I agree with what you said that \\\"inherently those\\ntwo objects could have different times\\\". The outside-loop assertion\\ntherefore makes better sense, and the loop was kind of just wasting\\ntime to me (I mean you could get lucky to have the two returning\\nthe same time down to a nanosecond, but that didn't make the test\\nbetter than just the out-of-loop assertion.\\n\\nmy 2 cents\\nJoe\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"view=1:0 5[1:58]\",\n    \"view\": \"1:0\",\n    \"5[1:58]\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"view=1:0 5[1:58],7[1:62]\",\n    \"view\": \"1:0\",\n    \"5[1:58],7[1:62]\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"view=2:-2 5[26:48],11[16:38] title=\\\"Проверяется, что now(zone) использует системное время\\\"\",\n    \"view\": \"2:-2\",\n    \"5[26:48],11[16:38]\": true,\n    \"title\": \"\\\"Проверяется,\",\n    \"что\": true,\n    \"now(zone)\": true,\n    \"использует\": true,\n    \"системное\": true,\n    \"время\\\"\": true\n  }), \"@Test\\npublic void now_ZoneId() {\\n    ZoneId zone = ZoneId.of(\\\"UTC+01:02:03\\\");\\n    LocalDateTime expected = LocalDateTime.now(Clock.system(zone));\\n    LocalDateTime test = LocalDateTime.now(zone);\\n    for (int i = 0; i < 100; i++) {\\n        if (expected.equals(test)) {\\n            return;\\n        }\\n        expected = LocalDateTime.now(Clock.system(zone));\\n        test = LocalDateTime.now(zone);\\n    }\\n    assertEquals(test.truncatedTo(ChronoUnit.SECONDS),\\n                 expected.truncatedTo(ChronoUnit.SECONDS));\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"view=2:-2 5[26:48],11[16:38] title=\\\"Как до этого догадаться?! 🤔\\\"\",\n    \"view\": \"2:-2\",\n    \"5[26:48],11[16:38]\": true,\n    \"title\": \"\\\"Как\",\n    \"до\": true,\n    \"этого\": true,\n    \"догадаться?!\": true,\n    \"🤔\\\"\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"None of the tests had commented on the purpose of the test\"), mdx(\"hr\", null), mdx(\"h1\", null, \"None of the tests had \", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"commented\"), \" on the purpose of the test\"), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u0412\\u044B\\u0432\\u043E\\u0434 \\u2013 \\u043F\\u0438\\u0448\\u0435\\u043C \\u043A\\u043E\\u043C\\u043C\\u0435\\u043D\\u0442\\u0430\\u0440\\u0438\\u0438\"), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u0412\\u044B\\u0432\\u043E\\u0434 \\u2013 \\u043F\\u0438\\u0448\\u0435\\u043C\\xA0\", mdx(\"strike\", {\n    style: {\n      color: clrRed\n    }\n  }, \"\\u043A\\u043E\\u043C\\u043C\\u0435\\u043D\\u0442\\u0430\\u0440\\u0438\\u0438\"), \" \", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"\\u043F\\u043E\\u043D\\u044F\\u0442\\u043D\\u044B\\u0439 \\u043A\\u043E\\u0434\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"view=2:-2\",\n    \"view\": \"2:-2\"\n  }), \"@Test\\npublic void now_ZoneId() {\\n  ZoneId zone = ZoneId.of(\\\"UTC+01:02:03\\\");\\n  LocalDateTime expected = LocalDateTime.now(Clock.system(zone));\\n  LocalDateTime test = LocalDateTime.now(zone);\\n  for (int i = 0; i < 100; i++) {\\n    if (expected.equals(test)) {\\n      return;\\n    }\\n    expected = LocalDateTime.now(Clock.system(zone));\\n    test = LocalDateTime.now(zone);\\n  }\\n  assertEquals(test.truncatedTo(ChronoUnit.SECONDS),\\n               expected.truncatedTo(ChronoUnit.SECONDS));\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"view=2:-2\",\n    \"view\": \"2:-2\"\n  }), \"@Test\\npublic void now_ZoneId() {\\n  ZoneId zone = ZoneId.of(\\\"UTC+01:02:03\\\");\\n  LocalDateTime expected = LocalDateTime.now(Clock.system(zone));\\n  LocalDateTime test = LocalDateTime.now(zone);\\n  assertEquals(test.truncatedTo(ChronoUnit.SECONDS),\\n               expected.truncatedTo(ChronoUnit.SECONDS));\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"view=2:-2 2\",\n    \"view\": \"2:-2\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"view=2:-2\",\n    \"view\": \"2:-2\"\n  }), \"@Test\\npublic void now_ZoneId__uses_system_time() {\\n  ZoneId zone = ZoneId.of(\\\"UTC+01:02:03\\\");\\n  LocalDateTime expected = LocalDateTime.now(Clock.system(zone));\\n  LocalDateTime test = LocalDateTime.now(zone);\\n  assertEquals(test.truncatedTo(ChronoUnit.SECONDS),\\n               expected.truncatedTo(ChronoUnit.SECONDS));\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"view=2:-2\",\n    \"view\": \"2:-2\"\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-none\"\n  }), \"org.opentest4j.AssertionFailedError: \\nExpected :2020-02-01T07:26:51\\nActual   :2020-02-01T07:26:52\\n\\n  ...\\n  at c.e.LocalDateTimeTest.now_ZoneId__uses_system_time(LocalDateTimeTest.kt:17)\\n  ...\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2,3,6[28:55]\",\n    \"2,3,6[28:55]\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"view=2:-2 4:9\",\n    \"view\": \"2:-2\",\n    \"4:9\": true\n  }), \"@Test\\npublic void now_ZoneId__uses_system_time() {\\n  ZoneId zone = ZoneId.of(\\\"UTC+01:02:03\\\");\\n  LocalDateTime expected = LocalDateTime.now(Clock.system(zone));\\n  LocalDateTime test = LocalDateTime.now(zone);\\n  assertEquals(\\n    test.truncatedTo(ChronoUnit.SECONDS),\\n    expected.truncatedTo(ChronoUnit.SECONDS),\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"view=2:-2 4:10\",\n    \"view\": \"2:-2\",\n    \"4:10\": true\n  }), \"@Test\\npublic void now_ZoneId__uses_system_time() {\\n  ZoneId zone = ZoneId.of(\\\"UTC+01:02:03\\\");\\n  LocalDateTime expected = LocalDateTime.now(Clock.system(zone));\\n  LocalDateTime test = LocalDateTime.now(zone);\\n  assertEquals(\\n    test.truncatedTo(ChronoUnit.SECONDS),\\n    expected.truncatedTo(ChronoUnit.SECONDS),\\n    \\\"LocalDateTime.now(ZoneId) should take the time from system clock\\\"\\n  );\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-none\",\n    \"metastring\": \"view=1:0 2:4 title=\\\" \\\"\",\n    \"view\": \"1:0\",\n    \"2:4\": true,\n    \"title\": \"\\\" \\\"\"\n  }), \"org.opentest4j.AssertionFailedError:\\n  LocalDateTime.now(ZoneId) should take the time from system clock\\nExpected :2020-02-01T07:26:51\\nActual   :2020-02-01T07:26:52\\n\\n  ...\\n  at c.e.LocalDateTimeTest.now_ZoneId__uses_system_time(LocalDateTimeTest.kt:17)\\n  ...\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"view=1:0 2,7[28:55] title=\\\"🤔\\\"\",\n    \"view\": \"1:0\",\n    \"2,7[28:55]\": true,\n    \"title\": \"\\\"🤔\\\"\"\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"view=2:-2 4:10\",\n    \"view\": \"2:-2\",\n    \"4:10\": true\n  }), \"@Test\\npublic void now_ZoneId__uses_system_time() {\\n  ZoneId zone = ZoneId.of(\\\"UTC+01:02:03\\\");\\n  LocalDateTime expected = LocalDateTime.now(Clock.system(zone));\\n  LocalDateTime test = LocalDateTime.now(zone);\\n  assertEquals(\\n    test.truncatedTo(ChronoUnit.SECONDS),\\n    expected.truncatedTo(ChronoUnit.SECONDS),\\n    \\\"LocalDateTime.now(ZoneId) should take the time from system clock\\\"\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"view=2:-2 4:10\",\n    \"view\": \"2:-2\",\n    \"4:10\": true\n  }), \"@Test\\npublic void now_ZoneId__uses_system_time() {\\n  ZoneId zone = ZoneId.of(\\\"UTC+01:02:03\\\");\\n  LocalDateTime expected = LocalDateTime.now(Clock.system(zone));\\n  LocalDateTime test = LocalDateTime.now(zone);\\n  assertEquals(\\n    test.truncatedTo(ChronoUnit.SECONDS),\\n    expected.truncatedTo(ChronoUnit.SECONDS),\\n    \\\"now(ZoneId)=\\\" + test + \\\", expected=\\\" + expected + \\\", zone=\\\" + zone\\n  );\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-none\",\n    \"metastring\": \"2:5\",\n    \"2:5\": true\n  }), \"org.opentest4j.AssertionFailedError:\\n now(ZoneId)==2020-02-01T07:26:51.999999999 should be similar to\\n now(Clock) ==2020-02-01T07:26:52.000000001\\nExpected :2020-02-01T07:26:51\\nActual   :2020-02-01T07:26:52\\n\\n  ...\\n  at c.e.LocalDateTimeTest.now_ZoneId__uses_system_time(LocalDateTimeTest.kt:17)\\n  ...\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u0421\\u0442\\u0440\\u043E\\u043A\\u0430 \\u0431\\u0435\\u0437\\xA0\\u043A\\u043E\\u043D\\u043A\\u0430\\u0442\\u0435\\u043D\\u0430\\u0446\\u0438\\u0438 \\u2013 \", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"\\u0442\\u0435\\u0441\\u0442\\xA0\\u043D\\u0430\\xA0\\u0432\\u0435\\u0442\\u0435\\u0440\")), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u0422\\u0435\\u043F\\u0435\\u0440\\u044C \\u0432 \\u043A\\u0430\\u0436\\u0434\\u043E\\u043C \\u0442\\u0435\\u0441\\u0442\\u0435 \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u044F\\u0442\\u044C \\u044D\\u0442\\u0438 \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u044F?\", mdx(\"br\", null), \"\\uD83D\\uDE40\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"view=1:-2 subtitle=\\\" \\\"\",\n    \"view\": \"1:-2\",\n    \"subtitle\": \"\\\" \\\"\"\n  }), \"@Test public void now_ZoneId_010203__uses_system_time() {\\n  ZoneId zone = ZoneId.of(\\\"UTC+01:02:03\\\");\\n  LocalDateTime expected = LocalDateTime.now(Clock.system(zone));\\n  LocalDateTime actual = LocalDateTime.now(zone);\\n  assertEquals(\\n    actual.truncatedTo(ChronoUnit.SECONDS),\\n    expected.truncatedTo(ChronoUnit.SECONDS),\\n    \\\"now(ZoneId)=\\\" + test + \\\", expected=\\\" + expected\\n  );\\n}\\n\\n@Test public void now_ZoneId_UTC__uses_system_time() {\\n  ZoneId zone = ZoneOffset.UTC;\\n  LocalDateTime expected = LocalDateTime.now(Clock.system(zone));\\n  LocalDateTime actual = LocalDateTime.now(zone);\\n  assertEquals(\\n    actual.truncatedTo(ChronoUnit.SECONDS),\\n    expected.truncatedTo(ChronoUnit.SECONDS),\\n    \\\"now(ZoneId)=\\\" + test + \\\", expected=\\\" + expected\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"view=1:-2 5,12,15:22 subtitle=\\\"refactor: extract method\\\"\",\n    \"view\": \"1:-2\",\n    \"5,12,15:22\": true,\n    \"subtitle\": \"\\\"refactor:\",\n    \"extract\": true,\n    \"method\\\"\": true\n  }), \"@Test public void now_ZoneId_010203__uses_system_time() {\\n  ZoneId zone = ZoneId.of(\\\"UTC+01:02:03\\\");\\n  LocalDateTime expected = LocalDateTime.now(Clock.system(zone));\\n  LocalDateTime actual = LocalDateTime.now(zone);\\n  assertLocalDateTimeSimilar(actual, expected, zone);\\n}\\n\\n@Test public void now_ZoneId_UTC__uses_system_time() {\\n  ZoneId zone = ZoneOffset.UTC;\\n  LocalDateTime expected = LocalDateTime.now(Clock.system(zone));\\n  LocalDateTime test = LocalDateTime.now(zone);\\n  assertLocalDateTimeSimilar(actual, expected, zone);\\n}\\n\\nprivate void assertLocalDateTimeSimilar(\\n    LocalDateTime actual, LocalDateTime expected, ZoneId zone) {\\n  assertEquals(\\n    actual.truncatedTo(ChronoUnit.SECONDS),\\n    expected.truncatedTo(ChronoUnit.SECONDS),\\n    \\\"now(ZoneId)=\\\" + test + \\\", expected=\\\" + expected + \\\", zone=\\\" + zone\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"1:15 view=1:15 title=\\\"org.junit.jupiter:junit-jupiter-params\\\"\",\n    \"1:15\": true,\n    \"view\": \"1:15\",\n    \"title\": \"\\\"org.junit.jupiter:junit-jupiter-params\\\"\"\n  }), \"@ParameterizedTest\\n@MethodSource(...)\\nvoid now_ZoneId__uses_system_time(\\n    LocalDateTime expected, LocalDateTime actual, ZoneId zone) {\\n  assertLocalDateTimeSimilar(actual, expected, zone);\\n}\\n\\nprivate void assertLocalDateTimeSimilar(\\n    LocalDateTime actual, LocalDateTime expected, ZoneId zone) {\\n  assertEquals(\\n    actual.truncatedTo(ChronoUnit.SECONDS),\\n    expected.truncatedTo(ChronoUnit.SECONDS),\\n    \\\"now(ZoneId)=\\\" + test + \\\", expected=\\\" + expected + \\\", zone=\\\" + zone\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"13\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"view=1:15 13 title=\\\" \\\"\",\n    \"view\": \"1:15\",\n    \"title\": \"\\\" \\\"\"\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"view=2:-2 title=\\\" \\\" subtitle=\\\" \\\"\",\n    \"view\": \"2:-2\",\n    \"title\": \"\\\" \\\"\",\n    \"subtitle\": \"\\\" \\\"\"\n  }), \" @Test\\n public void now_ZoneId__uses_system_time() {\\n   ZoneId zone = ZoneId.of(\\\"UTC+01:02:03\\\");\\n   LocalDateTime expected = LocalDateTime.now(Clock.system(zone));\\xA0\\n   LocalDateTime test = LocalDateTime.now(zone);\\n   assertEquals(\\n     test.truncatedTo(ChronoUnit.SECONDS),\\n     expected.truncatedTo(ChronoUnit.SECONDS),\\n     \\\"now(ZoneId)=\\\" + test + \\\", expected=\\\" + expected + \\\", zone=\\\" + zone\\n   );\\n }\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"view=2:-2 subtitle=\\\" \\\"\",\n    \"view\": \"2:-2\",\n    \"subtitle\": \"\\\" \\\"\"\n  }), \" @Test\\n public void now_ZoneId__uses_system_time() {\\n   ZoneId zone = ZoneId.of(\\\"UTC+01:02:03\\\");\\n   LocalDateTime expected = LocalDateTime.now(Clock.system(zone));\\n   LocalDateTime test = LocalDateTime.now(zone);\\n   assertEquals(\\n     test.truncatedTo(ChronoUnit.SECONDS),\\n     expected.truncatedTo(ChronoUnit.SECONDS),\\n-    \\\"now(ZoneId)=\\\" + test + \\\", expected=\\\" + expected + \\\", zone=\\\" + zone\\n   );\\n }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"view=2:-2 9:10 subtitle=\\\"JUnit 5: assertEquals(..., message: Supplier<String>)\\\"\",\n    \"view\": \"2:-2\",\n    \"9:10\": true,\n    \"subtitle\": \"\\\"JUnit\",\n    \"5:\": true,\n    \"assertEquals(...,\": true,\n    \"message:\": true,\n    \"Supplier<String>)\\\"\": true\n  }), \" @Test\\n public void now_ZoneId__uses_system_time() {\\n   ZoneId zone = ZoneId.of(\\\"UTC+01:02:03\\\");\\n   LocalDateTime expected = LocalDateTime.now(Clock.system(zone));\\n   LocalDateTime test = LocalDateTime.now(zone);\\n   assertEquals(\\n     test.truncatedTo(ChronoUnit.SECONDS),\\n     expected.truncatedTo(ChronoUnit.SECONDS),\\n-    \\\"now(ZoneId)=\\\" + test + \\\", expected=\\\" + expected + \\\", zone=\\\" + zone\\n+    () -> \\\"now(ZoneId)=\\\" + test + \\\", expected=\\\" + expected + \\\", zone=\\\" + zone\\n   );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"view=2:-2 5:13\",\n    \"view\": \"2:-2\",\n    \"5:13\": true\n  }), \" ZoneId zone = ZoneId.of(\\\"UTC+01:02:03\\\");\\n LocalDateTime expected = LocalDateTime.now(Clock.system(zone));\\n LocalDateTime test = LocalDateTime.now(zone);\\n\\n @Benchmark\\n public void now_ZoneId__uses_system_time() {\\n   assertEquals(\\n     test.truncatedTo(ChronoUnit.SECONDS),\\n     expected.truncatedTo(ChronoUnit.SECONDS),\\n-    \\\"now(ZoneId)=\\\" + test + \\\", expected=\\\" + expected + \\\", zone=\\\" + zone\\n+    () -> \\\"now(ZoneId)=\\\" + test + \\\", expected=\\\" + expected + \\\", zone=\\\" + zone\\n   );\\n }\\n\"))), mdx(\"hr\", null), mdx(Stepper, {\n    length: 1,\n    render: function render(step) {\n      // darkTheme.brewer.qualitative3_1\n      return mdx(React.Fragment, null, mdx(\"div\", {\n        style: {\n          width: '100vw',\n          height: '100vh'\n        }\n      }, mdx(V.VictoryChart, {\n        theme: darkTheme,\n        domainPadding: 70,\n        padding: {\n          left: 160,\n          top: 20,\n          right: 50,\n          bottom: 90\n        }\n      }, mdx(V.VictoryGroup, {\n        colorScale: [clrRed, clrBlue],\n        categories: {\n          x: [\"Supplier<String>\", \"String + String\"]\n        },\n        domain: {\n          y: [0, 600]\n        }\n      }, mdx(V.VictoryBar, {\n        horizontal: true,\n        barWidth: 40,\n        animate: {\n          duration: 300\n        },\n        labels: function labels(_ref2) {\n          var datum = _ref2.datum;\n          return datum.y < 0.5 ? \"\" : Math.round(datum.y);\n        },\n        data: [{\n          x: \"String + String\",\n          y: step <= 0 ? 0 : 540\n        }]\n      }), mdx(V.VictoryBar, {\n        horizontal: true,\n        barWidth: 40,\n        animate: {\n          duration: 300\n        },\n        labels: function labels(_ref3) {\n          var datum = _ref3.datum;\n          return datum.y < 0.5 ? \"\" : Math.round(datum.y);\n        },\n        data: [{\n          x: \"Supplier<String>\",\n          y: step <= 0 ? 0 : 60\n        }]\n      })), mdx(V.VictoryAxis, {\n        dependentAxis: true,\n        label: \"\\u0414\\u043B\\u0438\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E\\u0441\\u0442\\u044C, \\u043D\\u0441\"\n      }), mdx(V.VictoryAxis, {\n        tickLabelComponent: mdx(V.VictoryLabel, {\n          style: _objectSpread({}, darkTheme.axis.style.tickLabels, {\n            fontFamily: current_themes[2].fonts.monospace\n          })\n        })\n      }))));\n    },\n    mdxType: \"Stepper\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"view=1:0 3:6\",\n    \"view\": \"1:0\",\n    \"3:6\": true\n  }), \"@Benchmark\\npublic void now_ZoneId__uses_system_time() {\\n  assertEquals(\\n    test.truncatedTo(ChronoUnit.SECONDS),\\n    expected.truncatedTo(ChronoUnit.SECONDS),\\n      \\\"now(ZoneId)=\\\" + test + \\\", expected=\\\" + expected + \\\", zone=\\\" + zone\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"view=1:0 6:8\",\n    \"view\": \"1:0\",\n    \"6:8\": true\n  }), \"@Benchmark\\npublic void now_ZoneId__uses_system_time() {\\n  assertEquals(\\n    test.truncatedTo(ChronoUnit.SECONDS),\\n    expected.truncatedTo(ChronoUnit.SECONDS),\\n    // \\u0412\\u044B\\u0447\\u0438\\u0441\\u043B\\u044F\\u0435\\u043C \\u043F\\u0440\\u0438 \\u043A\\u0430\\u0436\\u0434\\u043E\\u043C \\u0432\\u044B\\u0437\\u043E\\u0432\\u0435\\n      \\\"now(ZoneId)=\\\" + test + \\\", expected=\\\" + expected + \\\", zone=\\\" + zone\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"view=1:0 6:8\",\n    \"view\": \"1:0\",\n    \"6:8\": true\n  }), \"@Benchmark\\npublic void now_ZoneId__uses_system_time() {\\n  assertEquals(\\n    test.truncatedTo(ChronoUnit.SECONDS),\\n    expected.truncatedTo(ChronoUnit.SECONDS),\\n    // \\u0412\\u044B\\u0447\\u0438\\u0441\\u043B\\u044F\\u0435\\u043C \\u0442\\u043E\\u043B\\u044C\\u043A\\u043E \\u043F\\u0440\\u0438 \\u043F\\u0430\\u0434\\u0435\\u043D\\u0438\\u0438 \\u0442\\u0435\\u0441\\u0442\\u0430\\n    () ->\\n      \\\"now(ZoneId)=\\\" + test + \\\", expected=\\\" + expected + \\\", zone=\\\" + zone\\n  );\\n}\\n\"))), mdx(\"hr\", null), mdx(Image, {\n    alt: \"\\u041D\\u0435\\u0443\\u0436\\u0435\\u043B\\u0438 \\u0441\\u043A\\u043E\\u0440\\u043E\\u0441\\u0442\\u044C assert'\\u043E\\u0432 \\u0432\\u0430\\u0436\\u043D\\u0430?\",\n    src: shipilev,\n    style: {\n      opacity: 0.6,\n      backgroundPositionY: '90%'\n    },\n    mdxType: \"Image\"\n  }), mdx(\"hr\", null), mdx(\"h1\", {\n    style: {\n      fontFamily: \"Book Antiqua\",\n      fontWeight: 400\n    }\n  }, \"Directed by\", mdx(\"br\", null), \"ROBERT B. WEIDE\"), mdx(\"hr\", null), mdx(\"h2\", null, \"\\u0422\\u0435\\u0441\\u0442\\u043E\\u0432 \", mdx(\"span\", {\n    style: {\n      color: clrRed\n    }\n  }, \"\\u043C\\u043D\\u043E\\u0433\\u043E\"), \" \\u2013 \\u0441\\u043A\\u043E\\u0440\\u043E\\u0441\\u0442\\u044C \\u043D\\u0435 \\u043B\\u0438\\u0448\\u043D\\u044F\\u044F\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"view=2:-2\",\n    \"view\": \"2:-2\"\n  }), \"@Test\\npublic void now_ZoneId__uses_system_time() {\\n  ZoneId zone = ZoneId.of(\\\"UTC+01:02:03\\\");\\n  LocalDateTime expected = LocalDateTime.now(Clock.system(zone));\\n  LocalDateTime test = LocalDateTime.now(zone);\\n  assertEquals(\\n    test.truncatedTo(ChronoUnit.SECONDS),\\n    expected.truncatedTo(ChronoUnit.SECONDS),\\n    \\\"expected=\\\" + expected + \\\", actual = \\\" + test + \\\", zone = \\\" + zone\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"view=2:-2 3[17:41]\",\n    \"view\": \"2:-2\",\n    \"3[17:41]\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"view=2:-2 3,6,9:11\",\n    \"view\": \"2:-2\",\n    \"3,6,9:11\": true\n  }), \"@Test\\npublic void now_ZoneId__uses_system_time() {\\n  for (ZoneId zone: ZoneId.getAvailableZoneIds()) {\\n    LocalDateTime expected = LocalDateTime.now(Clock.system(zone));\\n    LocalDateTime test = LocalDateTime.now(zone);\\n    assertEquals(\\n      test.truncatedTo(ChronoUnit.SECONDS),\\n      expected.truncatedTo(ChronoUnit.SECONDS),\\n      \\\"expected=\\\" + expected + \\\", actual = \\\" + test + \\\", zone = \\\" + zone\\n    );\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"view=2:-2 3:7\",\n    \"view\": \"2:-2\",\n    \"3:7\": true\n  }), \"@Test\\npublic void now_ZoneId__uses_system_time() {\\n  for (ZoneId zone: ZoneId.getAvailableZoneIds()) {\\n    for (long expected = Long.MIN_VALUE; expected != Long.MAX_VALUE; expected++) {\\n      ...\\n    }\\n  }\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u041A\\u0430\\u043A \\u0432\\u044B\\u0431\\u0438\\u0440\\u0430\\u0442\\u044C \", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"\\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u044F\\xA0\\u043C\\u0435\\u0442\\u043E\\u0434\\u043E\\u0432\"), \"?\"), mdx(\"hr\", null), mdx(Stepper, {\n    length: 2,\n    render: function render(step) {\n      return mdx(\"div\", {\n        style: {\n          position: \"relative\"\n        }\n      }, mdx(\"img\", {\n        alt: \"JIRA-based method naming\",\n        src: jira_naming,\n        width: 1056\n      }), mdx(\"div\", {\n        style: {\n          position: \"absolute\",\n          visibility: step == 0 ? \"hidden\" : null,\n          left: 445,\n          top: 195,\n          width: 610,\n          height: 70,\n          border: \"10px solid red\"\n        }\n      }));\n    },\n    mdxType: \"Stepper\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    alt: \"KT2425\",\n    src: KT2425\n  }), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://youtrack.jetbrains.com/issue/KT-2425\"\n  }), \"https://youtrack.jetbrains.com/issue/KT-2425\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\"\n  }), \"@Test\\nfun testKT2425()\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\"\n  }), \"@Test\\nfun testKT2425()\\n\\n@Test\\nfun KT2425()\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\"\n  }), \"@Test\\nfun testKT2425()\\n\\n@Test\\nfun KT2425()\\n\\n@Test\\nfun dollarStringsKT2425()\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\"\n  }), \"@Test\\nfun testKT2425()\\n\\n@Test\\nfun KT2425()\\n\\n@Test\\nfun dollarStringsKT2425()\\n\\n@Test\\n@Issue(\\\"KT-2425\\\")\\nfun dollarStrings()\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"subtitle=\\\"Длинные названия в тестах – норма\\\"\",\n    \"subtitle\": \"\\\"Длинные\",\n    \"названия\": true,\n    \"в\": true,\n    \"тестах\": true,\n    \"–\": true,\n    \"норма\\\"\": true\n  }), \"@Test\\nfun testKT2425()\\n\\n@Test\\nfun KT2425()\\n\\n@Test\\nfun dollarStringsKT2425()\\n\\n@Test\\n@Issue(\\\"KT-2425\\\")\\nfun dollarStrings()\\n\\n@Test\\n@Issue(\\\"KT-2425\\\")\\nfun dollarEscapingInMultilineStrings()\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"subtitle=\\\"А так – ещё лучше\\\"\",\n    \"subtitle\": \"\\\"А\",\n    \"так\": true,\n    \"–\": true,\n    \"ещё\": true,\n    \"лучше\\\"\": true\n  }), \"@Test\\nfun testKT2425()\\n\\n@Test\\nfun KT2425()\\n\\n@Test\\nfun dollarStringsKT2425()\\n\\n@Test\\n@Issue(\\\"KT-2425\\\")\\nfun dollarStrings()\\n\\n@Test\\n@Issue(\\\"KT-2425\\\")\\nfun dollarEscapingInMultilineStrings()\\n\\n@Test\\n@Issue(\\\"KT-2425\\\")\\nfun `dollar escaping in multiline strings`()\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"subtitle=\\\"JUnit5: DisplayName\\\"\",\n    \"subtitle\": \"\\\"JUnit5:\",\n    \"DisplayName\\\"\": true\n  }), \"@Test\\nfun testKT2425()\\n\\n@Test\\nfun KT2425()\\n\\n@Test\\nfun dollarStringsKT2425()\\n\\n@Test\\n@Issue(\\\"KT-2425\\\")\\nfun dollarStrings()\\n\\n@Test\\n@Issue(\\\"KT-2425\\\")\\nfun dollarEscapingInMultilineStrings()\\n\\n@Test\\n@Issue(\\\"KT-2425\\\")\\nfun `dollar escaping in multiline strings`()\\n\\n@Test\\n@Issue(\\\"KT-2425\\\")\\n@DisplayName(\\\"dollar escaping in multiline strings\\\")\\nfun dollarEscapingInMultilineStrings()\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u041D\\u0435 \", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"\\u043C\\u0435\\u0442\\u043E\\u0434\\u0430\\u043C\\u0438\"), \" \\u0435\\u0434\\u0438\\u043D\\u044B\\u043C\\u0438\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\"\n  }), \"class DollarInStringsTest {\\n  @Test fun `dollar variable`() = \\\"$var\\\"\\n  @Test fun `dollar dollar variable`() = \\\"$var\\\"\\n  @Test fun `slash dollar`() = \\\"$var\\\"\\n  @Test fun `double slash vs dollar`() = \\\"\\\\$var\\\"\\n  @Test fun `dollar numeric`() = \\\"$1\\\"\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\"\n  }), \"class DollarInStringsTest {\\n  class Replaced {\\n    @Test fun `dollar variable`() = \\\"$var\\\"\\n    @Test fun `dollar dollar variable`() = \\\"$$var\\\"\\n  }\\n\\n  class NotReplaced {\\n    @Test fun `slash dollar`() = \\\"$var\\\"\\n    @Test fun `double slash vs dollar`() = \\\"\\\\$var\\\"\\n    @Test fun `dollar numeric`() = \\\"$1\\\"\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"1:3,8:9 title=\\\"JUnit 5\\\"\",\n    \"1:3,8:9\": true,\n    \"title\": \"\\\"JUnit\",\n    \"5\\\"\": true\n  }), \"class DollarInStringsTest {\\n  @DiplayName(\\\"Dollar is not replaced in string\\\")\\n  class Replaced {\\n    @Test fun `dollar variable`() = \\\"$var\\\"\\n    @Test fun `dollar dollar variable`() = \\\"$$var\\\"\\n  }\\n\\n  @DiplayName(\\\"Dollar is replaced in string\\\")\\n  class NotReplaced {\\n    @Test fun `slash dollar`() = \\\"$var\\\"\\n    @Test fun `double slash vs dollar`() = \\\"\\\\$var\\\"\\n    @Test fun `dollar numeric`() = \\\"$1\\\"\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"title=\\\"Kotest (https://github.com/kotest/kotest)\\\"\",\n    \"title\": \"\\\"Kotest\",\n    \"(https://github.com/kotest/kotest)\\\"\": true\n  }), \"class DollarInStringsTest : StringSpec({\\n  withClue(\\\"Dollar is not replaced in string\\\") {\\n    \\\"dollar variable\\\" { ... }\\n    \\\"dollar dollar variable\\\" { ... }\\n  }\\xA0\\n\\n  withClue(\\\"Dollar is not replaced in string\\\") {\\n    \\\"slash dollar\\\" { ... }\\n    \\\"double slash vs dollar\\\" { ... }\\n    \\\"dollar numeric\\\" { ... }\\n  }\\xA0\\n})\\n\"))), mdx(\"hr\", null), mdx(YouTube, {\n    src: pavel_kotest,\n    link: \"https://snowone.ru/speakers/finkelstein\",\n    mdxType: \"YouTube\"\n  }), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"code\", null, \"assertEquals(\", mdx(\"br\", null), \"\\xA0\\xA0String,\", mdx(\"br\", null), \"\\xA0\\xA0\", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"String\"), \",\", mdx(\"br\", null), \"\\xA0\\xA0\", mdx(\"span\", {\n    style: {\n      color: clrRed\n    }\n  }, \"String\"), mdx(\"br\", null), \")\")), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"code\", null, \"assertEquals(\", mdx(\"br\", null), \"\\xA0\\xA0expected,\", mdx(\"br\", null), \"\\xA0\\xA0\", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"actual\"), \",\", mdx(\"br\", null), \"\\xA0\\xA0\", mdx(\"span\", {\n    style: {\n      color: clrRed\n    }\n  }, \"message\"), mdx(\"br\", null), \")\")), mdx(\"hr\", null), mdx(\"code\", null, \"TestNG 7: assertEquals(actual, \", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"expected\"), \", \", mdx(\"span\", {\n    style: {\n      color: clrRed\n    }\n  }, \"message\"), \")\", mdx(\"br\", null), \"\\xA0JUnit 4: assertEquals(\", mdx(\"span\", {\n    style: {\n      color: clrRed\n    }\n  }, \"message\"), \", \", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"expected\"), \", actual)\", mdx(\"br\", null), \"\\xA0JUnit 5: assertEquals(\", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"expected\"), \", actual, \", mdx(\"span\", {\n    style: {\n      color: clrRed\n    }\n  }, \"message\"), \")\", mdx(\"br\", null), \"Hamcrest: assertThat(actual)\", mdx(\"br\", null), \"\\xA0AssertJ: assertThat(actual)\", mdx(\"br\", null), \"\\xA0\\xA0\\xA0Truth: assertThat(actual)\"), mdx(\"hr\", null), mdx(\"code\", {\n    lang: \"java\"\n  }, \"var \", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"expected\"), \" = ...\", mdx(\"br\", null), \"var actual = ...\", mdx(\"br\", null), \"assertEquals(\", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"expected\"), \", actual)\"), mdx(\"br\", null), mdx(Steps, {\n    mdxType: \"Steps\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"expected\"), \" == actual\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"expected\"), \".equals(actual)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, \"actual.equals(\", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"expected\"), \")\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, \"== + equals\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, \"== + equals + hashCode\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, \"== + equals + hashCode + \\u0435\\u0449\\u0451 \\u0447\\u0442\\u043E-\\u0442\\u043E\")))), mdx(\"br\", null), mdx(\"hr\", null), mdx(\"code\", {\n    lang: \"java\"\n  }, \"var \", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"expected\"), \" = ...\", mdx(\"br\", null), \"var actual = ...\", mdx(\"br\", null), \"assert\", mdx(\"span\", {\n    style: {\n      color: clrRed\n    }\n  }, \"Not\"), \"Equals(\", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"expected\"), \", actual)\"), mdx(\"br\", null), mdx(Steps, {\n    mdxType: \"Steps\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"expected\"), \" != actual\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, \"!\", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"expected\"), \".equals(actual)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, \"!actual.equals(\", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"expected\"), \")\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, \"!= + equals\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, \"!= + equals + hashCode\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", null, \"!= + equals + hashCode + \\u0435\\u0449\\u0451 \\u0447\\u0442\\u043E-\\u0442\\u043E\")))), mdx(\"br\", null), mdx(\"hr\", null), mdx(\"img\", {\n    alt: \"tagir\",\n    src: tagir_equals,\n    width: 1008,\n    height: 566\n  }), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/tagir_valeev/status/1265482811374538754\"\n  }), \"https://twitter.com/tagir_valeev/status/1265482811374538754\")), mdx(\"hr\", null), mdx(\"h1\", null, \"(\\u256F\\xB0\\u25A1\\xB0)\\u256F\\uFE35 \\u253B\\u2501\\u253B \", mdx(\"span\", {\n    style: {\n      transform: \"rotateZ(45deg)\",\n      display: \"inline-block\"\n    }\n  }, \"assertEquals\")), mdx(\"hr\", null), mdx(\"img\", {\n    alt: \"tagir\",\n    src: tagir_asserttrue,\n    width: 1007,\n    height: 335\n  }), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/tagir_valeev/status/1265487546441764868\"\n  }), \"https://twitter.com/tagir_valeev/status/1265487546441764868\")), mdx(\"hr\", null), mdx(\"h3\", {\n    style: {\n      textAlign: \"center\"\n    }\n  }, mdx(\"code\", null, \"assertTrue(\", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"expected\"), \" == actual)\")), mdx(Steps, {\n    mdxType: \"Steps\"\n  }, mdx(\"h3\", {\n    style: {\n      textAlign: \"center\"\n    }\n  }, mdx(\"code\", null, \"assertTrue(\", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"expected\"), \".equals(actual))\")), mdx(\"h1\", null, \"\\uD83E\\uDD70\")), mdx(\"br\", null), mdx(\"hr\", null), mdx(\"div\", {\n    style: {\n      position: \"absolute\",\n      bottom: \"0.5em\",\n      zIndex: 100\n    }\n  }, mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://jqno.nl/equalsverifier/\"\n  }), \"https://jqno.nl/equalsverifier/\"))), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"view=1:10 subtitle=\\\" \\\"\",\n    \"view\": \"1:10\",\n    \"subtitle\": \"\\\" \\\"\"\n  }), \"@Test\\nfun `Customer equals hashCode`() {\\n    EqualsVerifier.forClass(Customer.class).verify()\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"subtitle=\\\" \\\"\",\n    \"subtitle\": \"\\\" \\\"\"\n  }), \"@Test\\nfun `Customer equals hashCode`() {\\n    EqualsVerifier.forClass(Customer.class).verify()\\n}\\n\\n@Test\\nfun `Template equals hashCode`() {\\n    EqualsVerifier.forClass(Template.class)\\n        .usingGetClass()\\n        .suppress(Warning.NONFINAL_FIELDS)\\n        .suppress(Warning.TRANSIENT_FIELDS)\\n        .verify()\\n}\\n\"))), mdx(\"hr\", null), mdx(YouTube, {\n    src: satarin_verifier,\n    link: \"https://www.youtube.com/watch?v=jeCpYOEuL64\",\n    mdxType: \"YouTube\"\n  }), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u0415\\u0441\\u043B\\u0438 \", mdx(\"inlineCode\", {\n    parentName: \"h1\"\n  }, \"equals\"), \" \\u0431\\u0438\\u0442\\u044B\\u0439, \\u0442\\u043E \\u0443\\u0436\\u0435 \\u043D\\u0438\\u0447\\u0435\\u0433\\u043E \\u043D\\u0435 \\u043F\\u043E\\u043C\\u043E\\u0436\\u0435\\u0442\"), mdx(\"hr\", null), mdx(\"code\", {\n    style: {\n      fontSize: 80\n    }\n  }, \"\\u0427\\u0442\\u043E \\u0442\\u0430\\u043A\\u043E\\u0435\", mdx(\"br\", null), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0assertEquals\", mdx(\"br\", null), \"\\u0418 \\u0447\\u0442\\u043E \\u0442\\u0430\\u043A\\u043E\\u0435\", mdx(\"br\", null), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0assertTrue\", mdx(\"br\", null)), mdx(\"hr\", null), mdx(\"h1\", null, mdx(\"inlineCode\", {\n    parentName: \"h1\"\n  }, \"assertTrue\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\"\n  }), \"    resultSet.next()\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"1:3\",\n    \"1:3\": true\n  }), \"assertTrue(\\n    resultSet.next()\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\"\n  }), \"assertTrue(\\n    resultSet.next()\\n)\\n\\nassertTrue(\\n  output.getResponseDataAsString().contains(\\\"success\\\")\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"5:15\",\n    \"5:15\": true\n  }), \"assertTrue(\\n    resultSet.next()\\n)\\n\\nassertTrue(\\n  output.getResponseDataAsString().contains(\\\"success\\\")\\n)\\n\\njava.lang.AssertionError\\n  at org.junit.Assert.fail(Assert.java:86)\\n  at org.junit.Assert.assertTrue(Assert.java:41)\\n  at org.a.jmeter...testRawBodyFromFile(TestHTTPSamplers.java:385)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"5:15\",\n    \"5:15\": true\n  }), \"assertTrue(\\n    resultSet.next()\\n)\\n\\nassertTrue(\\n  output.getResponseDataAsString().contains(\\\"success\\\")\\n  , \\\"Request should succeed, actual output was $output\\\"\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\"\n  }), \"class TimerServiceTest {\\n    val sut = TimerService.getInstance();\\n\\n    @Test\\n    fun `big initial delay`() {\\n        val delay = Long.MAX_VALUE\\n        val deadline = System.currentTimeMillis() + 1000L\\n        val adjustedDelay = sut.adjustDelay(delay, deadline)\\n        // As #adjustDelay uses System#currentTimeMillis\\n        // we can't be sure, that the value is exact 1000L\\n        Assert.assertThat(\\n            Math.abs(adjustedDelay - 1000L) < 150L,\\n            CoreMatchers.is(true)\\n        )\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"view=1:0 2\",\n    \"view\": \"1:0\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"view=1:0 6:8\",\n    \"view\": \"1:0\",\n    \"6:8\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"view=1:0 9:10\",\n    \"view\": \"1:0\",\n    \"9:10\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"view=1:0 11:14\",\n    \"view\": \"1:0\",\n    \"11:14\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"view=1:0\",\n    \"view\": \"1:0\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"view=1:0 9:13\",\n    \"view\": \"1:0\",\n    \"9:13\": true\n  }), \"class TimerServiceTest {\\n    val sut = TimerService.getInstance();\\n\\n    @Test\\n    fun `big initial delay`() {\\n        val delay = Long.MAX_VALUE\\n        val deadline = System.currentTimeMillis() + 1000L\\n        val adjustedDelay = sut.adjustDelay(delay, deadline)\\n        // As #adjustDelay uses System#currentTimeMillis\\n        // we can't be sure, that the value is exact 1000L\\n        Assert.assertTrue(\\n            Math.abs(adjustedDelay - 1000L) < 150L\\n        )\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"view=1:0\",\n    \"view\": \"1:0\"\n  }), \"class TimerServiceTest {\\n    val sut = TimerService.getInstance();\\n\\n    @Test\\n    fun `big initial delay`() {\\n        val delay = Long.MAX_VALUE\\n        val deadline = System.currentTimeMillis() + 1000L\\n        val adjustedDelay = sut.adjustDelay(delay, deadline)\\n        Assert.assertTrue(\\n            Math.abs(adjustedDelay - 1000L) < 150L,\\n            \\\"adjustedDelay should not exceed deadline too much\\\" +\\n            \\\", delay=$delay, deadline=$deadline, adjustedDelay=...\\\"\\n        )\\n    }\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u0428\\u0430\\u0439\\u0431\\u0443! \\u0428\\u0430\\u0439\\u0431y!\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Groovy! Groovy!\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Spock\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-groovy\"\n  }), \"class AssertTest extends Specification {\\n    def set = new HashSet()\\n\\n    def \\\"set add\\\"() {\\n        when:\\n        set += [\\\"hello\\\", \\\"world\\\"]\\n\\n        then:\\n        set.toList().toString() == \\\"hello\\\"\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-groovy\",\n    \"metastring\": \"9,12:20\",\n    \"9,12:20\": true\n  }), \"class AssertTest extends Specification {\\n    def set = new HashSet()\\n\\n    def \\\"set add\\\"() {\\n        when:\\n        set += [\\\"hello\\\", \\\"world\\\"]\\n\\n        then:\\n        set.toList().toString() == \\\"hello\\\"\\n    }\\n\\nset.toList().toString() == \\\"hello\\\"\\n|   |        |          |\\n|   |        |          false\\n|   |        |          9 differences (35% similarity)\\n|   |        |          ([world, )hello(])\\n|   |        |          (--------)hello(-)\\n|   |        [world, hello]\\n|   [world, hello]\\n[world, hello]\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-groovy\",\n    \"metastring\": \"9,12:20\",\n    \"9,12:20\": true\n  }), \"class AssertTest extends Specification {\\n    def set = new HashSet()\\n\\n    def \\\"set add\\\"() {\\n        when:\\n        set += [\\\"hello\\\", \\\"world\\\"]\\n\\n        then:\\n        set.toList().toString() == \\\"hello\\\"\\n    }\\n\\nset.toList().toString() == \\\"hello\\\"\\n|   |        |          |\\n|   |        |          false\\n|   |        |          9 differences (35% similarity)\\n|   |        |          ([world, )hello(])\\n|   |        |          (--------)hello(-)\\n|   |        [world, hello]\\n|   [world, hello]\\n[world, hello]\\n\\n\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-groovy\"\n  }), \"class GroovyMain {\\n    static void main(String[] args) {\\n        def x = 2\\n        def y = 5\\n        assert x + 3 == y * 2\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-groovy\",\n    \"metastring\": \"5,9:14\",\n    \"5,9:14\": true\n  }), \"class GroovyMain {\\n    static void main(String[] args) {\\n        def x = 2\\n        def y = 5\\n        assert x + 3 == y * 2\\n    }\\n}\\n\\nException in thread \\\"main\\\" Assertion failed: \\n\\nassert x + 3 == y * 2\\n       | |   |  | |\\n       2 5   |  5 10\\n             false\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"class GroovyMain {\\n    static void main(String[] args) {\\n        def x = 2\\n        def y = 5\\n        assert x + 3 == y * 2\\n    }\\n}\\n\\nException in thread \\\"main\\\" Assertion failed: \\n\\nassert x + 3 == y * 2\\n       | |   |  | |\\n       2 5   |  5 10\\n             false\\n\\npublic class JavaMain {\\n    public static void main(String[] args) {\\n        int x = 2;\\n        int y = 5;\\n        assert x + 3 == y * 2;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"20,24:25 subtitle=\\\"😢\\\"\",\n    \"20,24:25\": true,\n    \"subtitle\": \"\\\"😢\\\"\"\n  }), \"class GroovyMain {\\n    static void main(String[] args) {\\n        def x = 2\\n        def y = 5\\n        assert x + 3 == y * 2\\n    }\\n}\\n\\nException in thread \\\"main\\\" Assertion failed: \\n\\nassert x + 3 == y * 2\\n       | |   |  | |\\n       2 5   |  5 10\\n             false\\n\\npublic class JavaMain {\\n    public static void main(String[] args) {\\n        int x = 2;\\n        int y = 5;\\n        assert x + 3 == y * 2;\\n    }\\n}\\n\\nException in thread \\\"main\\\" java.lang.AssertionError\\n    at com.example.JavaMain.main(JavaMain.java:7)\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Power Assert Java\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/jkschneider/java-power-assert\"\n  }), \"https://github.com/jkschneider/java-power-assert\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"repositories {\\n    maven(\\\"https://dl.bintray.com/jkschneider/maven\\\")\\n}\\n\\ndependencies {\\n    testImplementation(\\\"io.jschneider:java-power-assert:0.9.1\\\")\\n    testAnnotationProcessor(\\\"io.jschneider:java-power-assert:0.9.1\\\")\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"repositories {\\n    maven(\\\"https://dl.bintray.com/jkschneider/maven\\\")\\n}\\n\\ndependencies {\\n    testImplementation(\\\"io.jschneider:java-power-assert:0.9.1\\\")\\n    testAnnotationProcessor(\\\"io.jschneider:java-power-assert:0.9.1\\\")\\n}\\n\\npublic class JavaMain {\\n    public static void main(String[] args) {\\n        int x = 2;\\n        int y = 5;\\n        assert x + 3 == y * 2;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"14,18:22 subtitle=\\\"😍\\\"\",\n    \"14,18:22\": true,\n    \"subtitle\": \"\\\"😍\\\"\"\n  }), \"repositories {\\n    maven(\\\"https://dl.bintray.com/jkschneider/maven\\\")\\n}\\n\\ndependencies {\\n    testImplementation(\\\"io.jschneider:java-power-assert:0.9.1\\\")\\n    testAnnotationProcessor(\\\"io.jschneider:java-power-assert:0.9.1\\\")\\n}\\n\\npublic class JavaMain {\\n    public static void main(String[] args) {\\n        int x = 2;\\n        int y = 5;\\n        assert x + 3 == y * 2;\\n    }\\n}\\n\\nException in thread \\\"main\\\" java.lang.AssertionError: \\n\\nx + 3 == y * 2\\n| |      | |\\n2 5      5 10\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u041A\\u0430\\u043A \\u0436\\u0435 \\u043E\\u043D\\u043E \\u0440\\u0430\\u0431\\u043E\\u0442\\u0430\\u0435\\u0442?\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public static void main(String[] args) {\\n  int x = 2;\\n  int y = 5;\\n  assert x + 3 == y * 2;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"view=1:0 4:14\",\n    \"view\": \"1:0\",\n    \"4:14\": true\n  }), \"public static void main(String[] args) {\\n  int x = 2;\\n  int y = 5;\\n  // assert x + 3 == y * 2;\\n  RecorderRuntime $rr = new RecorderRuntime();\\n  $rr.powerAssert(\\n    \\\"x + 3 == y * 2\\\",\\n    $rr.recordValue(\\n      $rr.recordValue($rr.recordValue(x, 144) + 3, 146) ==\\n      $rr.recordValue($rr.recordValue(y, 153) * 2, 155),\\n      153\\n    ),\\n    144\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"view=1:0 7[5:20],9[39,47:49,57:58],10[39,47:49,57:58]\",\n    \"view\": \"1:0\",\n    \"7[5:20],9[39,47:49,57:58],10[39,47:49,57:58]\": true\n  }), \"public static void main(String[] args) {\\n  int x = 2;\\n  int y = 5;\\n  // assert x + 3 == y * 2;\\n  RecorderRuntime $rr = new RecorderRuntime();\\n  $rr.powerAssert(\\n    \\\"x + 3 == y * 2\\\",\\n    $rr.recordValue(\\n      $rr.recordValue($rr.recordValue(x, 144) + 3, 146) ==\\n      $rr.recordValue($rr.recordValue(y, 153) * 2, 155),\\n      153\\n    ),\\n    144\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"view=1:0 8[9:19],9[11:21,27:37],10[11:21,27:37]\",\n    \"view\": \"1:0\",\n    \"8[9:19],9[11:21,27:37],10[11:21,27:37]\": true\n  }), \"public static void main(String[] args) {\\n  int x = 2;\\n  int y = 5;\\n  // assert x + 3 == y * 2;\\n  RecorderRuntime $rr = new RecorderRuntime();\\n  $rr.powerAssert(\\n    \\\"x + 3 == y * 2\\\",\\n    $rr.recordValue(\\n      $rr.recordValue($rr.recordValue(x, 144) + 3, 146) ==\\n      $rr.recordValue($rr.recordValue(y, 153) * 2, 155),\\n      153\\n    ),\\n    144\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"8[9:19],9[11:21,27:37],10[11:21,27:37],17:22\",\n    \"8[9:19],9[11:21,27:37],10[11:21,27:37],17:22\": true\n  }), \"public static void main(String[] args) {\\n  int x = 2;\\n  int y = 5;\\n  // assert x + 3 == y * 2;\\n  RecorderRuntime $rr = new RecorderRuntime();\\n  $rr.powerAssert(\\n    \\\"x + 3 == y * 2\\\",\\n    $rr.recordValue(\\n      $rr.recordValue($rr.recordValue(x, 144) + 3, 146) ==\\n      $rr.recordValue($rr.recordValue(y, 153) * 2, 155),\\n      153\\n    ),\\n    144\\n  );\\n}\\n\\npublic class RecorderRuntime {\\n    private List<RecordedValue> recordedValues = new ArrayList<>();\\n\\n    public <U> U recordValue(U value, int anchor) {\\n        RecordedValue recordedValue = new RecordedValue(value, anchor);\\n        recordedValues.add(recordedValue);\\n        return value;\\n    }\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"JUnit: assertArrayEquals(a, b)\\n                         |  |\\n                         |  [1, 2, 4]\\n                         [1, 2, 3]\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"JUnit: assertArrayEquals(a, b)\\n                         |  |\\n                         |  [1, 2, 4]\\n                         [1, 2, 3]\\n\\nHamcrest: assertThat(1, equalTo(a))\\n                     |      |\\n                     <2>    2\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"JUnit: assertArrayEquals(a, b)\\n                         |  |\\n                         |  [1, 2, 4]\\n                         [1, 2, 3]\\n\\nHamcrest: assertThat(1, equalTo(a))\\n                     |      |\\n                     <2>    2\\n\\nData d = new Data(\\\"abc\\\");\\nassert d.field.equals(\\\"def\\\");\\n       | |     |\\n       | abc   false\\n       Data[field=abc]\\n\"))), mdx(\"hr\", null), mdx(\"div\", {\n    style: {\n      position: \"absolute\",\n      top: \"0em\",\n      zIndex: 100,\n      fontSize: 40\n    }\n  }, mdx(\"h3\", null, \"Power Assert Kotlin\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/bnorm/kotlin-power-assert\"\n  }), \"https://github.com/bnorm/kotlin-power-assert\"))), mdx(\"hr\", null), mdx(\"div\", {\n    style: {\n      position: \"absolute\",\n      top: \"0em\",\n      zIndex: 100,\n      fontSize: 40\n    }\n  }, mdx(\"h3\", null, \"Power Assert Kotlin\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/bnorm/kotlin-power-assert\"\n  }), \"https://github.com/bnorm/kotlin-power-assert\"))), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\"\n  }), \"assert(hello.length == \\\"World\\\".substring(1, 4).length)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"view=2 1:8\",\n    \"view\": \"2\",\n    \"1:8\": true\n  }), \"java.lang.AssertionError:\\nassert(hello.length == \\\"World\\\".substring(1, 4).length)\\n       |     |      |          |               |\\n       |     |      |          |               3\\n       |     |      |          orl\\n       |     |      false\\n       |     5\\n       Hello\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u041D\\u0435 \\u0432\\u0441\\u0435 power assert'\\u044B \\u043E\\u0434\\u0438\\u043D\\u0430\\u043A\\u043E\\u0432\\u043E \\u043F\\u043E\\u043B\\u0435\\u0437\\u043D\\u044B\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-groovy\"\n  }), \"newProp.getStringValue() == stringValue\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-groovy\",\n    \"metastring\": \"1:9\",\n    \"1:9\": true\n  }), \"newProp.getStringValue() == stringValue\\n|       |                |  |\\n|       |                |  It should say:${hello world}\\n|       |                false\\n|       |                40 differences (33% similarity)\\n|       |                It should say: ${(${__r)e(gexFuncti)o(n(<a>(.+)o()(.*)</a>,$1$$2$))}(})\\n|       |                It should say: ${(h----)e(ll-------)o( w------)o(rld--------------)}(-)\\n|       It should say: ${${__regexFunction<a>(.+o)(.*)</a>,$1$$2)$}}\\nIt should say: ${${__regexFunction<a>(.+o)(.*)</a>,$1$$2)$}}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-groovy\"\n  }), \"TextUtil.normaliseLineSeparators(\\n  jar.content('META-INF/MANIFEST.MF')\\n) ==\\nTextUtil.normaliseLineSeparators(\\n  \\\"\\\"\\\"\\n  Manifest-Version: 1.0\\n  Build-Date: $buildDate\\n  Build-Time: $buildTime\\n  Code-Revision: 1.0\\n  Class-Path: a-file.jar another-file.jar\\n  \\\"\\\"\\\"\\n)\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-groovy\"\n  }), \"TextUtil.normaliseLineSeparators(jar.content('META-INF/MANIFEST.MF')) == TextUtil.normaliseLineSeparators(\\\"\\\"\\\"Manifest-Version: 1.0 Build-Date: $buildDate Build-Time: $buildTime Code-Revision: 1.0 Class-Path: a-file.jar another-file.jar \\\"\\\"\\\")\\n|        |                       |   |                                |  |        |                                                             |                      |\\n|        |                       |   |                                |  |        |                                                             2019-11-25             13:09:13+0100\\n|        |                       |   |                                |  |        Manifest-Version: 1.0\\n|        |                       |   |                                |  |        Build-Date: 2019-11-25\\n|        |                       |   |                                |  |        Build-Time: 13:09:13+0100\\n|        |                       |   |                                |  |        Code-Revision: 1.0\\n|        |                       |   |                                |  |        Class-Path: a-file.jar another-file.jar\\n|        |                       |   |                                |  class org.gradle.util.TextUtil\\n|        |                       |   |                                false\\n|        |                       |   |                                38 differences (70% similarity)\\n|        |                       |   |                                Manifest-Version: 1.0\\\\nBuild-Date: 2019-11-25\\\\n(Code-Revision: 1.0\\\\n)Build-Time: 13:09:13+0100\\\\nC(------------------~-)lass-Path: a-file.jar another-file.jar\\\\n\\\\n\\n|        |                       |   |                                Manifest-Version: 1.0\\\\nBuild-Date: 2019-11-25\\\\n(-------------------~)Build-Time: 13:09:13+0100\\\\nC(ode-Revision: 1.0\\\\nC)lass-Path: a-file.jar another-file.jar\\\\n\\\\n\\n|        |                       |   Manifest-Version: 1.0\\n|        |                       |   Build-Date: 2019-11-25\\n|        |                       |   Code-Revision: 1.0\\n|        |                       |   Build-Time: 13:09:13+0100\\n|        |                       |   Class-Path: a-file.jar another-file.jar\\n|        |                       <org.gradle.test.fixtures.archive.JarTestFixture@44226022 classFileDescriptor=-889275714 file=C:\\\\tcagent1\\\\work\\\\a16b87e0a70f8c6e\\\\subprojects\\\\plugins\\\\build\\\\tmp\\\\test files\\\\JarIntegrationTest\\\\\\n|        |                       preserves_manifest_order\\\\53ira\\\\build\\\\test.jar metadataCharset=UTF-8 contentCharset=UTF-8 filesByRelativePath={META-INF/MANIFEST.MF=[Manifest-Version: 1.0\\n|        |                       Build-Date: 2019-11-25\\n|        |                       Code-Revision: 1.0\\n|        |                       Build-Time: 13:09:13+0100\\n|        |                       Class-Path: a-file.jar another-file.jar\\n|        |                        \\n|        |                       ]} fileModesByRelativePath={META-INF/=[493], META-INF/MANIFEST.MF=[420]}>\\n|        Manifest-Version: 1.0\\n|        Build-Date: 2019-11-25\\n|        Code-Revision: 1.0\\n|        Build-Time: 13:09:13+0100\\n|        Class-Path: a-file.jar another-file.jar\\nclass org.gradle.util.TextUtil\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u041D\\u0430\\u0431\\u043B\\u044E\\u0434\\u0435\\u043D\\u0438\\u0435: power assert \", mdx(\"span\", {\n    style: {\n      color: clrRed\n    }\n  }, \"\\u043D\\u0435\\xA0\\u0437\\u0430\\u043C\\u0435\\u043D\\u044F\\u0435\\u0442\"), \" \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435\"), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u0424\\u0440\\u0435\\u0439\\u043C\\u0432\\u043E\\u0440\\u043A\\u0438 2020-\\u0433\\u043E\"), mdx(\"hr\", null), mdx(Stepper, {\n    length: 2,\n    render: function render(step) {\n      var d = [{\n        x: \"JUnit 4.13\",\n        y: 2020\n      }, {\n        x: \"JUnit 4.12\",\n        y: 2014\n      }, {\n        x: \"JUnit 4.14\",\n        y: 2026\n      }].splice(0, step + 1);\n      return mdx(\"div\", {\n        style: {\n          width: '90vw'\n        }\n      }, mdx(V.VictoryChart, {\n        theme: darkTheme,\n        domain: {\n          y: [2014, 2026]\n        },\n        categories: [\"JUnit 4.12\", \"JUnit 4.13\", \"JUnit 4.14\"]\n      }, mdx(V.VictoryLine, {\n        data: d\n      }), mdx(V.VictoryScatter, {\n        data: d,\n        labels: function labels(_ref4) {\n          var datum = _ref4.datum;\n          return datum.y;\n        }\n      }), mdx(V.VictoryAxis, {\n        tickFormat: function tickFormat(t, i) {\n          return [1, 0, 2].indexOf(i) <= step ? t : \"\";\n        }\n      })));\n    },\n    mdxType: \"Stepper\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"title=\\\"PR#1054, PR#1300: Improved error message for assertArrayEquals\\\"\",\n    \"title\": \"\\\"PR#1054,\",\n    \"PR#1300:\": true,\n    \"Improved\": true,\n    \"error\": true,\n    \"message\": true,\n    \"for\": true,\n    \"assertArrayEquals\\\"\": true\n  }), \"@Test\\nfun arrayEquals() {\\n    assertArrayEquals(arrayOf(1, 2), arrayOf(3, 2, 6))\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"3[5:54],6:8 title=\\\"PR#1054, PR#1300: Improved error message for assertArrayEquals\\\"\",\n    \"3[5:54],6:8\": true,\n    \"title\": \"\\\"PR#1054,\",\n    \"PR#1300:\": true,\n    \"Improved\": true,\n    \"error\": true,\n    \"message\": true,\n    \"for\": true,\n    \"assertArrayEquals\\\"\": true\n  }), \"@Test\\nfun arrayEquals() {\\n    assertArrayEquals(arrayOf(1, 2), arrayOf(3, 2, 6))\\n}\\n\\nJUnit 4.12:\\njava.lang.AssertionError: array lengths differed,\\n    expected.length=2 actual.length=3\\n  <stacktrace>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"3[5:54],6:8,11:17\",\n    \"3[5:54],6:8,11:17\": true\n  }), \"@Test\\nfun arrayEquals() {\\n    assertArrayEquals(arrayOf(1, 2), arrayOf(3, 2, 6))\\n}\\n\\nJUnit 4.12:\\njava.lang.AssertionError: array lengths differed,\\n    expected.length=2 actual.length=3\\n  <stacktrace>\\n\\nJUnit 4.13:\\n\\njava.lang.AssertionError: array lengths differed,\\n    expected.length=2 actual.length=3;\\n arrays first differed at element [0];\\nExpected :1\\nActual   :3\\n  <stacktrace>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"3[5:54],8:12 subtitle=\\\"🤐\\\"\",\n    \"3[5:54],8:12\": true,\n    \"subtitle\": \"\\\"🤐\\\"\"\n  }), \"@Test\\nfun arrayEquals() {\\n    assertArrayEquals(arrayOf(1, 2), arrayOf(3, 2, 6))\\n}\\n\\nJUnit 4.13:\\n\\njava.lang.AssertionError: array lengths differed,\\n    expected.length=2 actual.length=3;\\n arrays first differed at element [0];\\nExpected :1\\nActual   :3\\n  <stacktrace>\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"title=\\\"PR#1154 and #1504: Add assertThrows\\\"\",\n    \"title\": \"\\\"PR#1154\",\n    \"and\": true,\n    \"#1504:\": true,\n    \"Add\": true,\n    \"assertThrows\\\"\": true\n  }), \"class ExceptionTest {\\n   @Test\\n   fun `divizon by zero should throw`() {\\n   }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"title=\\\"PR#1154 and #1504: Add assertThrows\\\"\",\n    \"title\": \"\\\"PR#1154\",\n    \"and\": true,\n    \"#1504:\": true,\n    \"Add\": true,\n    \"assertThrows\\\"\": true\n  }), \"class ExceptionTest {\\n   @Test\\n   fun `divizon by zero should throw`() {\\n       assertThrows(\\n         ArithmeticException::class.java\\n       ) {\\n           146 / 0\\n       }\\n   }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\"\n  }), \"class ExceptionTest {\\n   @Test\\n   fun `divizon by zero should throw`() {\\n       val exception = assertThrows(\\n         ArithmeticException::class.java\\n       ) {\\n           146 / 0\\n       }\\n       Assert.assertEquals(\\\"/ by zero\\\", exception.message)\\n   }\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"view=1:0 title=\\\"PR#1150: Deprecate Assert#assertThat\\\"\",\n    \"view\": \"1:0\",\n    \"title\": \"\\\"PR#1150:\",\n    \"Deprecate\": true,\n    \"Assert#assertThat\\\"\": true\n  }), \"import org.junit.Assert.assertThat\\n\\n@Test\\nfun `test that uses assertThat`() {\\n  assertThat(146, equalTo(100 + 46))\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"view=1:0 title=\\\"PR#1150: Deprecate Assert#assertThat\\\"\",\n    \"view\": \"1:0\",\n    \"title\": \"\\\"PR#1150:\",\n    \"Deprecate\": true,\n    \"Assert#assertThat\\\"\": true\n  }), \"import org.hamcrest.MatcherAssert.assertThat\\n\\n@Test\\nfun `test that uses assertThat`() {\\n  assertThat(146, equalTo(100 + 46))\\n}\\n\"))), mdx(\"hr\", null), mdx(\"code\", null, \"TestNG 7: assertEquals(actual, \", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"expected\"), \", \", mdx(\"span\", {\n    style: {\n      color: clrRed\n    }\n  }, \"message\"), \")\", mdx(\"br\", null), \"\\xA0JUnit 4: assertEquals(\", mdx(\"span\", {\n    style: {\n      color: clrRed\n    }\n  }, \"message\"), \", \", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"expected\"), \", actual)\", mdx(\"br\", null), \"\\xA0JUnit 5: assertEquals(\", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"expected\"), \", actual, \", mdx(\"span\", {\n    style: {\n      color: clrRed\n    }\n  }, \"message\"), \")\", mdx(\"br\", null), \"Hamcrest: assertThat(actual)\", mdx(\"br\", null), \"\\xA0AssertJ: assertThat(actual)\", mdx(\"br\", null), \"\\xA0\\xA0\\xA0Truth: assertThat(actual)\"), mdx(\"hr\", null), mdx(\"code\", null, \"Hamcrest: assertThat(actual)\", mdx(\"br\", null), \"\\xA0AssertJ: assertThat(actual)\", mdx(\"br\", null), \"\\xA0\\xA0\\xA0Truth: assertThat(actual)\"), mdx(\"hr\", null), mdx(Invert, {\n    style: {\n      backgroundColor: \"white\"\n    },\n    mdxType: \"Invert\"\n  }, mdx(\"h1\", null, \"Hamcrest\"), mdx(\"img\", {\n    alt: \"hamcrest.png\",\n    src: hamcrest\n  })), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\"\n  }), \"val list = ...\\nassertThat(list)\\n    .contains(\\\"a\\\")\\n    .doesNotContain(\\\"b\\\")\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"title=\\\"AssertJ\\\"\",\n    \"title\": \"\\\"AssertJ\\\"\"\n  }), \"val list = ...\\nassertThat(list)\\n    .contains(\\\"a\\\")\\n    .doesNotContain(\\\"b\\\")\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"title=\\\"Hamcrest\\\"\",\n    \"title\": \"\\\"Hamcrest\\\"\"\n  }), \"val list = ...\\nassertThat(list)\\n    .contains(\\\"a\\\")\\n    .doesNotContain(\\\"b\\\")\\n\\nval list = ...\\nassertThat(\\n    list,\\n    allOf(\\n        hasItem(\\\"a\\\"),\\n        not(hasItem(\\\"b\\\"))\\n    )\\n)\\n\"))), mdx(\"hr\", null), mdx(\"code\", {\n    style: {\n      position: 'absolute',\n      left: '1.5em',\n      top: '1.5em',\n      display: 'inline-block',\n      whiteSpace: 'pre'\n    }\n  }, \"assertThat(\", mdx(\"br\", null), \"\\xA0\\xA0\\xA0\\xA0list,\", mdx(\"br\", null), \"\\xA0\\xA0\\xA0\\xA0allOf(\", mdx(\"br\", null), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0hasItem(\\\"a\\\"),\", mdx(\"br\", null), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0not(hasItem(\\\"b\\\"))\", mdx(\"br\", null), \"\\xA0\\xA0\\xA0\\xA0)\", mdx(\"br\", null), \")\"), mdx(\"img\", {\n    src: archery,\n    style: {\n      position: \"absolute\",\n      top: '-20px',\n      right: 0\n    }\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\"\n  }), \"val list = listOf(\\\"b\\\", \\\"d\\\")\\nassertThat(\\n    list,\\n    allOf(\\n        hasItem(\\\"a\\\"),\\n        not(hasItem(\\\"b\\\"))\\n    )\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\"\n  }), \"val list = listOf(\\\"b\\\", \\\"d\\\")\\nassertThat(\\n    list,\\n    allOf(\\n        hasItem(\\\"a\\\"),\\n        not(hasItem(\\\"b\\\"))\\n    )\\n)\\n\\nException in thread \\\"main\\\" java.lang.AssertionError:\\nExpected: (a collection containing \\\"a\\\" and not a collection containing \\\"b\\\")\\n     but: a collection containing \\\"a\\\" mismatches were: [was \\\"b\\\", was \\\"d\\\"]\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Truth\"), mdx(\"div\", {\n    style: {\n      textAlign: \"left\"\n    }\n  }, mdx(Steps, {\n    mdxType: \"Steps\"\n  }, mdx(\"span\", null, \"\\u2705 \", mdx(\"code\", null, \"<Click to see difference>\"), \" \\u0432 IDEA\", mdx(\"br\", null)), mdx(\"span\", null, \"\\u2705 \\u0425\\u043E\\u0440\\u043E\\u0448\\u0438\\u0435 \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u044F \\u043F\\u0440\\u0438 \\u043E\\u0448\\u0438\\u0431\\u043A\\u0430\\u0445\", mdx(\"br\", null)), mdx(\"span\", null, \"\\u2753 \\u0412 API \\u0442\\u043E\\u043B\\u044C\\u043A\\u043E \\u0441\\u0430\\u043C\\u043E\\u0435 \\u043D\\u0435\\u043E\\u0431\\u0445\\u043E\\u0434\\u0438\\u043C\\u043E\\u0435\", mdx(\"br\", null)), mdx(\"span\", null, \"\\u2705 \\u0420\\u0430\\u0431\\u043E\\u0442\\u0430\\u0435\\u0442 \\u0432 Android\", mdx(\"br\", null)), mdx(\"span\", null, \"\\u2705 \\u041F\\u043E\\u0434\\u0434\\u0435\\u0440\\u0436\\u0438\\u0432\\u0430\\u0435\\u0442 \\u043F\\u043B\\u0430\\u0433\\u0438\\u043D\\u044B\", mdx(\"br\", null)), mdx(\"span\", null, \"\\u2753 \\u041C\\u0430\\u043B\\u043E \\u0433\\u043E\\u0442\\u043E\\u0432\\u044B\\u0445 \\u043F\\u043B\\u0430\\u0433\\u0438\\u043D\\u043E\\u0432\", mdx(\"br\", null)), mdx(\"span\", null, \"\\u2705 JUnit 4\", mdx(\"br\", null)), mdx(\"span\", null, \"\\u274C JUnit 5\", mdx(\"br\", null)))), mdx(\"br\", null), mdx(\"br\", null), mdx(\"hr\", null), mdx(Stepper, {\n    length: 4,\n    render: function render(step) {\n      return mdx(\"table\", {\n        style: {\n          paddingLeft: \"1.5em\",\n          paddingRight: \"1.5em\"\n        }\n      }, mdx(\"tr\", null, mdx(\"th\", null, mdx(\"h2\", null, \"Truth\")), mdx(\"th\", null, mdx(\"h2\", null, \"AssertJ\"))), mdx(\"tr\", null, mdx(\"td\", null, \"\\u2753\\xA0\\u041C\\u0438\\u043D\\u0438\\u043C\\u0430\\u043B\\u044C\\u043D\\u043E\\u0435 API\"), mdx(\"td\", {\n        style: {\n          visibility: step < 1 ? \"hidden\" : null\n        }\n      }, \"\\u2753\\xA0\\u0411\\u043E\\u0433\\u0430\\u0442\\u043E\\u0435 API\")), mdx(\"tr\", null, mdx(\"td\", null, \"\\u2705 \\u0420\\u0430\\u0431\\u043E\\u0442\\u0430\\u0435\\u0442 \\u0432 Android\"), mdx(\"td\", {\n        style: {\n          visibility: step < 2 ? \"hidden\" : null\n        }\n      }, \"\\u274C \\u041D\\u0435 \\u0440\\u0430\\u0431\\u043E\\u0442\\u0430\\u0435\\u0442 \\u0432 Android\")), mdx(\"tr\", null, mdx(\"td\", null, \"\\u2753 JUnit 5\"), mdx(\"td\", {\n        style: {\n          visibility: step < 3 ? \"hidden\" : null\n        }\n      }, \"\\u2705\\xA0JUnit 5\")), mdx(\"tr\", null, mdx(\"td\", null, \"\\u2753 \\u041C\\u0430\\u043B\\u043E \\u0433\\u043E\\u0442\\u043E\\u0432\\u044B\\u0445 \\u043F\\u043B\\u0430\\u0433\\u0438\\u043D\\u043E\\u0432\"), mdx(\"td\", {\n        style: {\n          visibility: step < 4 ? \"hidden\" : null\n        }\n      }, \"\\u2705\\xA0\\u041C\\u043D\\u043E\\u0433\\u043E\\xA0\\u0433\\u043E\\u0442\\u043E\\u0432\\u044B\\u0445\\xA0\\u043F\\u043B\\u0430\\u0433\\u0438\\u043D\\u043E\\u0432\")));\n    },\n    mdxType: \"Stepper\"\n  }), mdx(\"br\", null), mdx(\"br\", null), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"title=\\\"AssertJ\\\"\",\n    \"title\": \"\\\"AssertJ\\\"\"\n  }), \"val frodo = TolkienCharacter(\\\"Frodo\\\", 33, HOBBIT);\\nval sam = TolkienCharacter(\\\"Sam\\\", 38, HOBBIT);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"title=\\\"AssertJ\\\" 1:8\",\n    \"title\": \"\\\"AssertJ\\\"\",\n    \"1:8\": true\n  }), \"val frodo = TolkienCharacter(\\\"Frodo\\\", 33, HOBBIT);\\nval sam = TolkienCharacter(\\\"Sam\\\", 38, HOBBIT);  \\n\\nassertThat(frodo)\\n    .isEqualToComparingFieldByFieldRecursively(\\n        sam,\\n        \\\"race\\\"\\n    )\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"title=\\\"AssertJ\\\" 1[43:48],2[39:44],5,7:8\",\n    \"title\": \"\\\"AssertJ\\\"\",\n    \"1[43:48],2[39:44],5,7:8\": true\n  }), \"val frodo = TolkienCharacter(\\\"Frodo\\\", 33, HOBBIT);\\nval sam = TolkienCharacter(\\\"Sam\\\", 38, HOBBIT);\\n\\nassertThat(frodo)\\n    .isEqualToComparingFieldByFieldRecursively(\\n        sam,\\n        \\\"race\\\"\\n    )\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"title=\\\"AssertJ\\\" 1[43:48],2[39:44],5,7:8\",\n    \"title\": \"\\\"AssertJ\\\"\",\n    \"1[43:48],2[39:44],5,7:8\": true\n  }), \"val frodo = TolkienCharacter(\\\"Frodo\\\", 33, HOBBIT);\\nval sam = TolkienCharacter(\\\"Sam\\\", 38, HOBBIT);\\n\\nassertThat(frodo)\\n    .isEqualToComparingFieldByFieldRecursively(\\n        sam,\\n        \\\"race.name\\\"\\n    )\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"title=\\\"AssertJ\\\" 1[30:36,43:48],2[28:32,39:44],5,7:9\",\n    \"title\": \"\\\"AssertJ\\\"\",\n    \"1[30:36,43:48],2[28:32,39:44],5,7:9\": true\n  }), \"val frodo = TolkienCharacter(\\\"Frodo\\\", 33, HOBBIT);\\nval sam = TolkienCharacter(\\\"Sam\\\", 38, HOBBIT);\\n\\nassertThat(frodo)\\n    .isEqualToComparingFieldByFieldRecursively(\\n        sam,\\n        \\\"race\\\",\\n        \\\"name\\\"\\n    )\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u0422\\u0435\\u0441\\u0442\\u0438\\u0440\\u0443\\u0435\\u043C \", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"\\u043A\\u0430\\u0441\\u0442\\u043E\\u043C\\u043D\\u043E\\u0435\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"class PGInterval {\\n    int years;\\n    int months;\\n    int days;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"class PGInterval {\\n    int years;\\n    int months;\\n    int days;\\n}\\n\\n@Test void agoInterval() {\\n      var pgi = new PGInterval(\\\"@ 2004 years 4 mons 20 days ago\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"8:11\",\n    \"8:11\": true\n  }), \"class PGInterval {\\n    int years;\\n    int months;\\n    int days;\\n}\\n\\n@Test void agoInterval() {\\n    var pgi = new PGInterval(\\\"@ 2004 years 4 mons 20 days ago\\\");\\n    assertThat(pgi.getYears()).isEqualTo(-2004);\\n    assertThat(pgi.getMonths()).isEqualTo(-4);\\n    assertThat(pgi.getDays()).isEqualTo(-20);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"9:10\",\n    \"9:10\": true\n  }), \"class PGInterval {\\n    int years;\\n    int months;\\n    int days;\\n}\\n\\n@Test void agoInterval() {\\n    var pgi = new PGInterval(\\\"@ 2004 years 4 mons 20 days ago\\\");\\n    assertThat(pgi.getYears()).isEqualTo(-2004);\\n    // ^^ \\u0435\\u0441\\u043B\\u0438 \\u0443\\u043F\\u0430\\u0434\\u0451\\u0442 \\u0442\\u0443\\u0442, \\u0442\\u043E \\u0431\\u0443\\u0434\\u0435\\u0442 \\u043D\\u0435\\u043F\\u043E\\u043D\\u044F\\u0442\\u043D\\u043E \\u043A\\u0430\\u043A \\u0442\\u0430\\u043C \\u043E\\u0441\\u0442\\u0430\\u043B\\u044C\\u043D\\u044B\\u0435 \\u043F\\u043E\\u043B\\u044F\\n    assertThat(pgi.getMonths()).isEqualTo(-4);\\n    assertThat(pgi.getDays()).isEqualTo(-20);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"9:11 subtitle=\\\"Можно оставить как есть\\\"\",\n    \"9:11\": true,\n    \"subtitle\": \"\\\"Можно\",\n    \"оставить\": true,\n    \"как\": true,\n    \"есть\\\"\": true\n  }), \"class PGInterval {\\n    int years;\\n    int months;\\n    int days;\\n}\\n\\n@Test void agoInterval() {\\n    var pgi = new PGInterval(\\\"@ 2004 years 4 mons 20 days ago\\\");\\n    assertThat(pgi.getYears()).isEqualTo(-2004);\\n    assertThat(pgi.getMonths()).isEqualTo(-4);\\n    assertThat(pgi.getDays()).isEqualTo(-20);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"7:17 subtitle=\\\"Можно разделить на 3 теста\\\"\",\n    \"7:17\": true,\n    \"subtitle\": \"\\\"Можно\",\n    \"разделить\": true,\n    \"на\": true,\n    \"теста\\\"\": true\n  }), \"class PGInterval {\\n    int years;\\n    int months;\\n    int days;\\n}\\n\\nvar pgi = new PGInterval(\\\"@ 2004 years 4 mons 20 days ago\\\");\\n\\n@Test void agoIntervalYears() {\\n    assertThat(pgi.getYears()).isEqualTo(-2004);\\n}\\n@Test void agoIntervalMonths() {\\n    assertThat(pgi.getMonths()).isEqualTo(-4);\\n}\\n@Test void agoIntervalDays() {\\n    assertThat(pgi.getDays()).isEqualTo(-20);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"7:17 subtitle=\\\"Можно жахнуть AssertJ Soft Assert\\\"\",\n    \"7:17\": true,\n    \"subtitle\": \"\\\"Можно\",\n    \"жахнуть\": true,\n    \"AssertJ\": true,\n    \"Soft\": true,\n    \"Assert\\\"\": true\n  }), \"class PGInterval {\\n    int years;\\n    int months;\\n    int days;\\n}\\n\\nvar pgi = new PGInterval(\\\"@ 2004 years 4 mons 20 days ago\\\");\\n\\n@Test void agoInterval() {\\n  var softly = new SoftAssertions();\\n  softly.\\n    assertThat(pgi.getYears()).isEqualTo(-2004);\\n  softly.\\n    assertThat(pgi.getMonths()).isEqualTo(-4);\\n  softly.\\n    assertThat(pgi.getDays()).isEqualTo(-20);\\n  softly.assertAll();\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"7:17 subtitle=\\\"AssertJ Soft Assert vs Kotlin\\\"\",\n    \"7:17\": true,\n    \"subtitle\": \"\\\"AssertJ\",\n    \"Soft\": true,\n    \"Assert\": true,\n    \"vs\": true,\n    \"Kotlin\\\"\": true\n  }), \"class PGInterval {\\n    int years;\\n    int months;\\n    int days;\\n}\\n\\nvar pgi = new PGInterval(\\\"@ 2004 years 4 mons 20 days ago\\\");\\n\\n@Test fun agoInterval() {\\n  SoftAssertions().apply {\\n    assertThat(pgi.getYears()).isEqualTo(-2004);\\n    assertThat(pgi.getMonths()).isEqualTo(-4);\\n    assertThat(pgi.getDays()).isEqualTo(-20);\\n    assertAll()\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"7:17 subtitle=\\\"Soft Assert в JUnit 5\\\"\",\n    \"7:17\": true,\n    \"subtitle\": \"\\\"Soft\",\n    \"Assert\": true,\n    \"в\": true,\n    \"JUnit\": true,\n    \"5\\\"\": true\n  }), \"class PGInterval {\\n    int years;\\n    int months;\\n    int days;\\n}\\n\\nvar pgi = new PGInterval(\\\"@ 2004 years 4 mons 20 days ago\\\");\\n\\n@Test void agoInterval() {\\n  Assertions.assertAll(\\n    () -> assertThat(pgi.getYears()).isEqualTo(-2004),\\n    () -> assertThat(pgi.getMonths()).isEqualTo(-4),\\n    () -> assertThat(pgi.getDays()).isEqualTo(-20)\\n  }\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u041D\\u043E \\u043A\\u0430\\u043A \\u0436\\u0435 Single \", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"Assert\"), \" Rule?\"), mdx(\"hr\", null), mdx(\"img\", {\n    alt: \"sar\",\n    src: sar,\n    width: 1138,\n    height: 381\n  }), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/unclebobmartin/status/1078695335935979520\"\n  }), \"https://twitter.com/unclebobmartin/status/1078695335935979520\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"7:17\",\n    \"7:17\": true\n  }), \"class PGInterval {\\n    int years;\\n    int months;\\n    int days;\\n}\\n\\nvar pgi = new PGInterval(\\\"@ 2004 years 4 mons 20 days ago\\\");\\n\\n@Test void agoInterval() {\\n  Assertions.assertAll(\\n    () -> assertThat(pgi.getYears()).isEqualTo(-2004),\\n    () -> assertThat(pgi.getMonths()).isEqualTo(-4),\\n    () -> assertThat(pgi.getDays()).isEqualTo(-20)\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Test void agoInterval() {\\n  Assertions.assertAll(\\n    () -> assertThat(pgi.getYears()).isEqualTo(-2004),\\n    () -> assertThat(pgi.getMonths()).isEqualTo(-4),\\n    () -> assertThat(pgi.getDays()).isEqualTo(-20)\\n  }\\n}\\n\\n@Test\\nvoid executesJUnit3SuiteWithSubsuites() {\\n  Class<?> suiteClass = SuiteWithSubsuites.class;\\n  execute(suiteClass).assertEventsMatchExactly(\\n    event(engine(), started()),\\n    event(container(suiteClass), started()),\\n    event(container(\\\"Case1\\\"), started()),\\n    event(test(\\\"hello\\\"), started()),\\n    event(test(\\\"hello\\\"), finishedSuccessfully()),\\n    event(container(\\\"Case1\\\"), finishedSuccessfully()),\\n    event(container(\\\"Case2\\\"), started()),\\n    event(test(\\\"hello\\\"), started()),\\n    event(test(\\\"hello\\\"), finishedSuccessfully()),\\n    event(container(\\\"Case2\\\"), finishedSuccessfully()),\\n    event(container(suiteClass), finishedSuccessfully()),\\n    event(engine(), finishedSuccessfully())\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"subtitle=\\\"А как поддерживать тесты?\\\"\",\n    \"subtitle\": \"\\\"А\",\n    \"как\": true,\n    \"поддерживать\": true,\n    \"тесты?\\\"\": true\n  }), \"@Test void agoInterval() {\\n  Assertions.assertAll(\\n    () -> assertThat(pgi.getYears()).isEqualTo(-2004),\\n    () -> assertThat(pgi.getMonths()).isEqualTo(-4),\\n    () -> assertThat(pgi.getDays()).isEqualTo(-20)\\n  }\\n}\\n\\n@Test\\nvoid executesJUnit3SuiteWithSubsuites() {\\n  Class<?> suiteClass = SuiteWithSubsuites.class;\\n  execute(suiteClass).assertEventsMatchExactly(\\n    event(engine(), started()),\\n    event(container(\\\"thread1\\\"), started()),\\n    event(container(suiteClass), started()),\\n    event(container(\\\"Case1\\\"), started()),\\n    event(test(\\\"hello\\\"), started()),\\n    event(test(\\\"hello\\\"), finishedSuccessfully()),\\n    event(container(\\\"Case1\\\"), finishedSuccessfully()),\\n    event(container(\\\"Case2\\\"), started()),\\n    event(test(\\\"hello\\\"), started()),\\n    event(test(\\\"hello\\\"), finishedSuccessfully()),\\n    event(container(\\\"Case2\\\"), finishedSuccessfully()),\\n    event(container(suiteClass), finishedSuccessfully()),\\n    event(container(\\\"thread1\\\"), finishedSuccessfully()),\\n    event(engine(), finishedSuccessfully())\\n  );\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u0425\\u043E\\u0440\\u043E\\u0448\\u043E \\u0431\\u044B \\u0442\\u0435\\u0441\\u0442\\u044B \", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"\\u0441\\u0430\\u043C\\u0438\"), \" \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u044F\\u043B\\u0438\\u0441\\u044C\", mdx(\"br\", null), \"\\uD83E\\uDD2A\"), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u041D\\u0430\\u0448 \\u0432\\u044B\\u0431\\u043E\\u0440 \\u2013\", mdx(\"br\", null), mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, mdx(\"code\", null, \"ctrl+c/v\")), \"-friendly \\u0442\\u0435\\u0441\\u0442\\u044B\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Test\\nvoid executesJUnit3SuiteWithSubsuites() {\\n  Class<?> suiteClass = SuiteWithSubsuites.class;\\n  execute(suiteClass).assertEventsMatchExactly(\\n    event(engine(), started()),\\n    event(container(\\\"thread1\\\"), started()),\\n    event(container(suiteClass), started()),\\n    event(container(\\\"Case1\\\"), started()),\\n    event(test(\\\"hello\\\"), started()),\\n    event(test(\\\"hello\\\"), finishedSuccessfully()),\\n    event(container(\\\"Case1\\\"), finishedSuccessfully()),\\n    event(container(\\\"Case2\\\"), started()),\\n    event(test(\\\"hello\\\"), started()),\\n    event(test(\\\"hello\\\"), finishedSuccessfully()),\\n    event(container(\\\"Case2\\\"), finishedSuccessfully()),\\n    event(container(suiteClass), finishedSuccessfully()),\\n    event(container(\\\"thread1\\\"), finishedSuccessfully()),\\n    event(engine(), finishedSuccessfully())\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"4[23:46]\",\n    \"4[23:46]\": true\n  }), \"@Test\\nvoid executesJUnit3SuiteWithSubsuites() {\\n  Class<?> suiteClass = SuiteWithSubsuites.class;\\n  execute(suiteClass).assertEventsMatchExactly(\\n    event(engine(), started()),\\n    event(container(\\\"thread1\\\"), started()),\\n    event(container(suiteClass), started()),\\n    event(container(\\\"Case1\\\"), started()),\\n    event(test(\\\"hello\\\"), started()),\\n    event(test(\\\"hello\\\"), finishedSuccessfully()),\\n    event(container(\\\"Case1\\\"), finishedSuccessfully()),\\n    event(container(\\\"Case2\\\"), started()),\\n    event(test(\\\"hello\\\"), started()),\\n    event(test(\\\"hello\\\"), finishedSuccessfully()),\\n    event(container(\\\"Case2\\\"), finishedSuccessfully()),\\n    event(container(suiteClass), finishedSuccessfully()),\\n    event(container(\\\"thread1\\\"), finishedSuccessfully()),\\n    event(engine(), finishedSuccessfully())\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"4[23:46],5:10\",\n    \"4[23:46],5:10\": true\n  }), \"@Test\\nvoid executesJUnit3SuiteWithSubsuites() {\\n  Class<?> suiteClass = SuiteWithSubsuites.class;\\n  execute(suiteClass).assertEventsMatchExactly(\\n    // ^^ \\u043F\\u0440\\u0438 \\u043F\\u0430\\u0434\\u0435\\u043D\\u0438\\u0438, \\u043C\\u0435\\u0442\\u043E\\u0434 assertEventsMatchExactly\\n    // \\u043C\\u043E\\u0436\\u0435\\u0442 \\u0440\\u0430\\u0441\\u043F\\u0435\\u0447\\u0430\\u0442\\u044B\\u0432\\u0430\\u0442\\u044C \\u043F\\u0440\\u043E\\u0441\\u0442\\u044B\\u043D\\u044E \\u0441 \\u0444\\u0430\\u043A\\u0442\\u0438\\u0447\\u0435\\u0441\\u043A\\u0438\\u043C\\u0438 \\u0440\\u0435\\u0437\\u0443\\u043B\\u044C\\u0442\\u0430\\u0442\\u0430\\u043C\\u0438:\\n    //\\n    // By the way, the actual output is\\n    //  event(container(\\\"thread1\\\"), started()),\\n    //  event(engine(), started()),\\n    ...\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"4[23:46],5:10\",\n    \"4[23:46],5:10\": true\n  }), \"@Test\\nvoid executesJUnit3SuiteWithSubsuites() {\\n  Class<?> suiteClass = SuiteWithSubsuites.class;\\n  execute(suiteClass).assertEventsMatchExactly(\\n    // By the way, the actual output is\\n    //  event(container(\\\"thread1\\\"), started()),\\n    //  event(engine(), started()),\\n    //\\n    // ^^ \\u042D\\u0442\\u0443 \\u0440\\u0430\\u0441\\u043F\\u0435\\u0447\\u0430\\u0442\\u043A\\u0443 \\u043A\\u043E\\u043F\\u0438\\u0440\\u0443\\u0435\\u043C \\u0432 \\u0442\\u0435\\u043B\\u043E \\u0442\\u0435\\u0441\\u0442\\u0430, \\u0438 \\u0442\\u0435\\u0441\\u0442 \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0451\\u043D\\n    ...\\n  );\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u041D\\u043E \\u043C\\u043E\\u0436\\u043D\\u043E \\u0438 \\u043F\\u043E-\\u0434\\u0440\\u0443\\u0433\\u043E\\u043C\\u0443\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Test\\nvoid executesJUnit3SuiteWithSubsuites() {\\n  Class<?> suiteClass = SuiteWithSubsuites.class;\\n  execute(suiteClass).assertEventsMatchExactly(\\n    event(engine(), started()),\\n    event(container(\\\"thread1\\\"), started()),\\n    event(container(suiteClass), started()),\\n    event(container(\\\"Case1\\\"), started()),\\n    event(test(\\\"hello\\\"), started()),\\n    event(test(\\\"hello\\\"), finishedSuccessfully()),\\n    event(container(\\\"Case1\\\"), finishedSuccessfully()),\\n    event(container(\\\"Case2\\\"), started()),\\n    event(test(\\\"hello\\\"), started()),\\n    event(test(\\\"hello\\\"), finishedSuccessfully()),\\n    event(container(\\\"Case2\\\"), finishedSuccessfully()),\\n    event(container(suiteClass), finishedSuccessfully()),\\n    event(container(\\\"thread1\\\"), finishedSuccessfully()),\\n    event(engine(), finishedSuccessfully())\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"4:20 subtitle=\\\"Сводим всё к строке\\\"\",\n    \"4:20\": true,\n    \"subtitle\": \"\\\"Сводим\",\n    \"всё\": true,\n    \"к\": true,\n    \"строке\\\"\": true\n  }), \"@Test\\nvoid executesJUnit3SuiteWithSubsuites() {\\n  Class<?> suiteClass = SuiteWithSubsuites.class;\\n  execute(suiteClass).assertEventsMatchExactly(\\n    \\\"\\\"\\\"\\n    engine(): started\\n    container(thread1): started\\n    container(suiteClass): started\\n    container(Case1): started\\n    test(hello): started\\n    test(hello): finishedSuccessfully\\n    container(Case1): finishedSuccessfully\\n    container(Case2): started\\n    test(hello): started\\n    test(hello): finishedSuccessfully\\n    container(Case2): finishedSuccessfully\\n    container(suiteClass): finishedSuccessfully\\n    container(thread1): finishedSuccessfully\\n    engine(): finishedSuccessfully\\n    \\\"\\\"\\\"\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"subtitle=\\\"Эталоны можно хранить в файле\\\"\",\n    \"subtitle\": \"\\\"Эталоны\",\n    \"можно\": true,\n    \"хранить\": true,\n    \"в\": true,\n    \"файле\\\"\": true\n  }), \"var goldenData = of(\\\"golden.yml\\\"); // \\u0417\\u0430\\u0433\\u0440\\u0443\\u0436\\u0430\\u0435\\u043C \\u044D\\u0442\\u0430\\u043B\\u043E\\u043D\\u044B \\u0438\\u0437 \\u0444\\u0430\\u0439\\u043B\\u0430\\n\\n@Test\\nvoid executesJUnit3SuiteWithSubsuites() {\\n  Class<?> suiteClass = SuiteWithSubsuites.class;\\n  execute(suiteClass).assertEventsMatchExactly(\\n    goldenData.getExpected(\\\"executesJUnit3SuiteWithSubsuites\\\")\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"var goldenData = of(\\\"golden.yml\\\"); // \\u0417\\u0430\\u0433\\u0440\\u0443\\u0436\\u0430\\u0435\\u043C \\u044D\\u0442\\u0430\\u043B\\u043E\\u043D\\u044B \\u0438\\u0437 \\u0444\\u0430\\u0439\\u043B\\u0430\\n\\n@Test\\nvoid executesJUnit3SuiteWithSubsuites() {\\n  Class<?> suiteClass = SuiteWithSubsuites.class;\\n  // \\u0422\\u0435\\u043F\\u0435\\u0440\\u044C \\u0434\\u0432\\u0438\\u0436\\u043E\\u043A \\u043C\\u043E\\u0436\\u0435\\u0442 \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u044F\\u0442\\u044C \\u044D\\u0442\\u0430\\u043B\\u043E\\u043D\\u043D\\u044B\\u0435 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435!\\n  execute(suiteClass).assertEventsMatchExactly(\\n    goldenData, \\\"executesJUnit3SuiteWithSubsuites\\\"\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"var goldenData = of(\\\"golden.yml\\\"); // \\u0417\\u0430\\u0433\\u0440\\u0443\\u0436\\u0430\\u0435\\u043C \\u044D\\u0442\\u0430\\u043B\\u043E\\u043D\\u044B \\u0438\\u0437 \\u0444\\u0430\\u0439\\u043B\\u0430\\n\\n@Test\\nvoid executesJUnit3SuiteWithSubsuites() {\\n  Class<?> suiteClass = SuiteWithSubsuites.class;\\n  // \\u0422\\u0435\\u043F\\u0435\\u0440\\u044C \\u0434\\u0432\\u0438\\u0436\\u043E\\u043A \\u043C\\u043E\\u0436\\u0435\\u0442 \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u044F\\u0442\\u044C \\u044D\\u0442\\u0430\\u043B\\u043E\\u043D\\u043D\\u044B\\u0435 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435!\\n  // \\u0418 \\u0434\\u043B\\u044F \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u044F \\u0442\\u0435\\u0441\\u0442\\u0430 \\u0434\\u043E\\u0441\\u0442\\u0430\\u0442\\u043E\\u0447\\u043D\\u043E \\u043F\\u043E\\u0434\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C \\u0444\\u0430\\u0439\\u043B\\n  execute(suiteClass).assertEventsMatchExactly(\\n    goldenData, \\\"executesJUnit3SuiteWithSubsuites\\\"\\n  );\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u0422\\u043E\\u043B\\u044C\\u043A\\u043E \\u0447\\u0442\\u043E \\u0432\\u044B \\u0432\\u0438\\u0434\\u0435\\u043B\\u0438 \", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"snapshot\"), \" \\u0442\\u0435\\u0441\\u0442\\u044B\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sql\"\n  }), \"select * from dept\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sql\"\n  }), \"select * from dept\\n\\nselect * from dept union select * from dept\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sql\"\n  }), \"select * from dept\\n\\nselect * from dept union select * from dept\\n\\nDistinct(fields=[{DEPTNO, NAME}])\\n  Union(all=[true])\\n    Project(DEPTNO=[$0], NAME=[$1])\\n      TableScan(table=[[CATALOG, SALES, DEPT]])\\n    Project(DEPTNO=[$0], NAME=[$1])\\n      TableScan(table=[[CATALOG, SALES, DEPT]])\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"select * from dept\\n\\nselect * from dept union select * from dept\\n\\n  Union(all=[false])\\n    Project(DEPTNO=[$0], NAME=[$1])\\n      TableScan(table=[[CATALOG, SALES, DEPT]])\\n    Project(DEPTNO=[$0], NAME=[$1])\\n      TableScan(table=[[CATALOG, SALES, DEPT]])\\n\"))), mdx(\"hr\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Apache Calcite: \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/apache/calcite/blob/69f25863f5f4197c17927a39a82cbf1cffd12b80/core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java\"\n  }), \"RelOptRulesTest\"), \", \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/apache/calcite/blob/c2df42eff1615bfcd46ae3db5099c9785b04d420/core/src/test/resources/org/apache/calcite/test/RelOptRulesTest.xml\"\n  }), \"RelOptRulesTest.xml\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"IntelliJ IDEA: \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/JetBrains/intellij-community/blob/3dc08d19ef31b59f77592729fa28450d0d7ff27a/uast/uast-tests/test/org/jetbrains/uast/test/java/JavaExpressionMultiResolveTest.kt\"\n  }), \"JavaExpressionMultiResolveTest\"), \", \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/JetBrains/intellij-community/blob/e586c13b90494676e460cf85a694ff810f5facf8/uast/uast-tests/java/Simple/ConstructorCallWithParameters.resolved.txt\"\n  }), \"ConstructorCallWithParameters.resolved.txt\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u0412\\u0430\\u0448 \\u043F\\u0440\\u043E\\u0435\\u043A\\u0442 \\u043C\\u043E\\u0433 \\u0431\\u044B \\u0431\\u044B\\u0442\\u044C \\u0437\\u0434\\u0435\\u0441\\u044C\")), mdx(\"hr\", null), mdx(YouTube, {\n    src: korovin,\n    link: \"https://heisenbug-piter.ru/2020/spb/talks/7emflctrgqk9ayyxj7cmel\",\n    mdxType: \"YouTube\"\n  }), mdx(\"hr\", null), mdx(\"h1\", null, \"CI \\u043D\\u0430\\u043D\\u043E\\u0441\\u0438\\u0442 \\u043E\\u0442\\u0432\\u0435\\u0442\\u043D\\u044B\\u0439 \\u0443\\u0434\\u0430\\u0440:\", mdx(\"br\", null), mdx(\"span\", {\n    style: {\n      color: clrRed\n    }\n  }, \"Maven\"), \" vs \", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"Gradle\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-none\",\n    \"metastring\": \"title=\\\"Maven + Travis CI\\\"\",\n    \"title\": \"\\\"Maven\",\n    \"+\": true,\n    \"Travis\": true,\n    \"CI\\\"\": true\n  }), \"[INFO] -------------------------------------------------------\\n[INFO]  T E S T S\\n[INFO] -------------------------------------------------------\\n[INFO] Running org.postgresql.replication.ReplicationTestSuite\\n[WARNING] Tests run: 1, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.089 s - in org.postgresql.replication.ReplicationTestSuite\\n[INFO] Running org.postgresql.test.socketfactory.SocketFactoryTestSuite\\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in org.postgresql.test.socketfactory.SocketFactoryTestSuite\\n[INFO] Running org.postgresql.test.jre8.core.Jre8TestSuite\\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 s - in org.postgresql.test.jre8.core.Jre8TestSuite\\n[INFO] Running org.postgresql.test.extensions.ExtensionsTestSuite\\n[WARNING] Tests run: 5, Failures: 0, Errors: 0, Skipped: 5, Time elapsed: 0.03 s - in org.postgresql.test.extensions.ExtensionsTestSuite\\n[INFO] Running org.postgresql.test.xa.XATestSuite\\n[WARNING] Tests run: 28, Failures: 0, Errors: 0, Skipped: 28, Time elapsed: 0.295 s - in org.postgresql.test.xa.XATestSuite\\n[INFO] Running org.postgresql.test.hostchooser.MultiHostTestSuite\\n[WARNING] Tests run: 1, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.002 s - in org.postgresql.test.hostchooser.MultiHostTestSuite\\n[INFO] Running org.postgresql.test.ssl.SslTestSuite\\nenableSslTests is null, skipping SSL tests\\n[INFO] Tests run: 27, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.242 s - in org.postgresql.test.ssl.SslTestSuite\\n[INFO] Running org.postgresql.test.ssl.SingleCertValidatingFactoryTestSuite\\nSkipping SingleCertSocketFactoryTests. To enable set the property testsinglecertfactory=true in the ssltest.properties file.\\n[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 s - in org.postgresql.test.ssl.SingleCertValidatingFactoryTestSuite\\n[INFO] Running org.postgresql.test.jdbc4.Jdbc4TestSuite\\n[WARNING] Tests run: 146, Failures: 0, Errors: 0, Skipped: 2, Time elapsed: 3.264 s - in org.postgresql.test.jdbc4.Jdbc4TestSuite\\n[INFO] Running org.postgresql.test.jdbc4.jdbc41.Jdbc41TestSuite\\nJUnit used sun.misc.Launcher$AppClassLoader@3d4eac69\\nSeparateClassLoaderInvokeMethod used sun.misc.Launcher$AppClassLoader@3d4eac69\\n[WARNING] Tests run: 66, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 2.221 s - in org.postgresql.test.jdbc4.jdbc41.Jdbc41TestSuite\\n[INFO] Running org.postgresql.test.jdbc3.Jdbc3TestSuite\\n[WARNING] Tests run: 284, Failures: 0, Errors: 0, Skipped: 6, Time elapsed: 2.926 s - in org.postgresql.test.jdbc3.Jdbc3TestSuite\\n[INFO] Running org.postgresql.test.jdbc42.Jdbc42TestSuite\\n[WARNING] Tests run: 141, Failures: 0, Errors: 0, Skipped: 11, Time elapsed: 15.545 s - in org.postgresql.test.jdbc42.Jdbc42TestSuite\\n[INFO] Running org.postgresql.test.jdbc2.Jdbc2TestSuite\\nUsing seed = 1582721110513 for StrangeInputStream. Set -DStrangeInputStream.seed=1582721110513 to reproduce the test\\nUsing seed = 1582721110839 for StrangeInputStream. Set -DStrangeInputStream.seed=1582721110839 to reproduce the test\\nUsing seed = 1582721111077 for StrangeInputStream. Set -DStrangeInputStream.seed=1582721111077 to reproduce the test\\nUsing seed = 1582721111317 for StrangeInputStream. Set -DStrangeInputStream.seed=1582721111317 to reproduce the test\\nUsing seed = 1582721111554 for StrangeInputStream. Set -DStrangeInputStream.seed=1582721111554 to reproduce the test\\nUsing seed = 1582721111777 for StrangeInputStream. Set -DStrangeInputStream.seed=1582721111777 to reproduce the test\\nUsing seed = 1582721112049 for StrangeInputStream. Set -DStrangeInputStream.seed=1582721112049 to reproduce the test\\nUsing seed = 1582721112283 for StrangeInputStream. Set -DStrangeInputStream.seed=1582721112283 to reproduce the test\\nUsing seed = 1582721112520 for StrangeInputStream. Set -DStrangeInputStream.seed=1582721112520 to reproduce the test\\nUsing seed = 1582721112756 for StrangeInputStream. Set -DStrangeInputStream.seed=1582721112756 to reproduce the test\\njava.version = 1.8.0_242-ea, JavaVersion.getRuntimeVersion() = v1_8\\n[testFastCloses] total counts for each sql state: {0=223, 55000=768, 57014=9}\\n[ERROR] Tests run: 4531, Failures: 0, Errors: 1, Skipped: 11, Time elapsed: 440.457 s <<< FAILURE! - in org.postgresql.test.jdbc2.Jdbc2TestSuite\\n[ERROR] testShortQueryTimeout(org.postgresql.test.jdbc2.StatementTest)  Time elapsed: 2.205 s  <<< ERROR!\\norg.postgresql.util.PSQLException: ERROR: canceling statement due to user request\\n    at org.postgresql.test.jdbc2.StatementTest.testShortQueryTimeout(StatementTest.java:746)\\n[INFO] Running org.postgresql.test.jdbc2.AutoRollbackTestSuite\\n[INFO] Tests run: 984, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 7.653 s - in org.postgresql.test.jdbc2.AutoRollbackTestSuite\\n[INFO] Running org.postgresql.test.jdbc2.optional.OptionalTestSuite\\n[WARNING] Tests run: 66, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 1.413 s - in org.postgresql.test.jdbc2.optional.OptionalTestSuite\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-none\",\n    \"metastring\": \"title=\\\"Maven + Travis CI\\\"\",\n    \"title\": \"\\\"Maven\",\n    \"+\": true,\n    \"Travis\": true,\n    \"CI\\\"\": true\n  }), \"[INFO] -------------------------------------------------------\\n[INFO]  T E S T S\\n[INFO] -------------------------------------------------------\\n[INFO] Running org.postgresql.replication.ReplicationTestSuite\\n[WARNING] Tests run: 1, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.089 s -\\nin org.postgresql.replication.ReplicationTestSuite\\n[INFO] Running org.postgresql.test.socketfactory.SocketFactoryTestSuite\\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - \\nin org.postgresql.test.socketfactory.SocketFactoryTestSuite\\n[INFO] Running org.postgresql.test.jre8.core.Jre8TestSuite\\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 s - \\nin org.postgresql.test.jre8.core.Jre8TestSuite\\n[INFO] Running org.postgresql.test.extensions.ExtensionsTestSuite\\n[WARNING] Tests run: 5, Failures: 0, Errors: 0, Skipped: 5, Time elapsed: 0.03 s - \\nin org.postgresql.test.extensions.ExtensionsTestSuite\\n[INFO] Running org.postgresql.test.xa.XATestSuite\\n[WARNING] Tests run: 28, Failures: 0, Errors: 0, Skipped: 28, Time elapsed: 0.295 s - \\nin org.postgresql.test.xa.XATestSuite\\n[INFO] Running org.postgresql.test.hostchooser.MultiHostTestSuite\\n[WARNING] Tests run: 1, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.002 s - \\nin org.postgresql.test.hostchooser.MultiHostTestSuite\\n[INFO] Running org.postgresql.test.ssl.SslTestSuite\\nenableSslTests is null, skipping SSL tests\\n[INFO] Tests run: 27, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.242 s - \\nin org.postgresql.test.ssl.SslTestSuite\\n[INFO] Running org.postgresql.test.ssl.SingleCertValidatingFactoryTestSuite\\n[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 s - \\nin org.postgresql.test.ssl.SingleCertValidatingFactoryTestSuite\\n[INFO] Running org.postgresql.test.jdbc4.Jdbc4TestSuite\\n[WARNING] Tests run: 146, Failures: 0, Errors: 0, Skipped: 2, Time elapsed: 3.264 s -\\nin org.postgresql.test.jdbc4.Jdbc4TestSuite\\n[INFO] Running org.postgresql.test.jdbc4.jdbc41.Jdbc41TestSuite\\nJUnit used sun.misc.Launcher$AppClassLoader@3d4eac69\\nSeparateClassLoaderInvokeMethod used sun.misc.Launcher$AppClassLoader@3d4eac69\\n[WARNING] Tests run: 66, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 2.221 s -\\nin org.postgresql.test.jdbc4.jdbc41.Jdbc41TestSuite\\n[INFO] Running org.postgresql.test.jdbc3.Jdbc3TestSuite\\n[WARNING] Tests run: 284, Failures: 0, Errors: 0, Skipped: 6, Time elapsed: 2.926 s -\\nin org.postgresql.test.jdbc3.Jdbc3TestSuite\\n[INFO] Running org.postgresql.test.jdbc42.Jdbc42TestSuite\\n[WARNING] Tests run: 141, Failures: 0, Errors: 0, Skipped: 11, Time elapsed: 15.545 s -\\nin org.postgresql.test.jdbc42.Jdbc42TestSuite\\n[INFO] Running org.postgresql.test.jdbc2.Jdbc2TestSuite\\njava.version = 1.8.0_242-ea, JavaVersion.getRuntimeVersion() = v1_8\\n[testFastCloses] total counts for each sql state: {0=223, 55000=768, 57014=9}\\n[ERROR] Tests run: 4531, Failures: 0, Errors: 1, Skipped: 11, Time elapsed: 440.457 s\\n<<< FAILURE! - in org.postgresql.test.jdbc2.Jdbc2TestSuite\\n[ERROR] testShortQueryTimeout(org.postgresql.test.jdbc2.StatementTest)\\nTime elapsed: 2.205 s  <<< ERROR!\\norg.postgresql.util.PSQLException: ERROR: canceling statement due to user request\\n    at org.postgresql.test.jdbc2.StatementTest.testShortQueryTimeout(StatementTest.java:746)\\n[INFO] Running org.postgresql.test.jdbc2.AutoRollbackTestSuite\\n[INFO] Tests run: 984, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 7.653 s -\\nin org.postgresql.test.jdbc2.AutoRollbackTestSuite\\n[INFO] Running org.postgresql.test.jdbc2.optional.OptionalTestSuite\\n[WARNING] Tests run: 66, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 1.413 s -\\nin org.postgresql.test.jdbc2.optional.OptionalTestSuite\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"35:43 title=\\\"Maven: тяжело следить где что\\\"\",\n    \"35:43\": true,\n    \"title\": \"\\\"Maven:\",\n    \"тяжело\": true,\n    \"следить\": true,\n    \"где\": true,\n    \"что\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"47:51 title=\\\"Maven: тяжело понять что сломалось\\\"\",\n    \"47:51\": true,\n    \"title\": \"\\\"Maven:\",\n    \"тяжело\": true,\n    \"понять\": true,\n    \"что\": true,\n    \"сломалось\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"746\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"51[48:92] subtitle=\\\"Строка 746 ещё актуальна?\\\"\",\n    \"51[48:92]\": true,\n    \"subtitle\": \"\\\"Строка\",\n    \"ещё\": true,\n    \"актуальна?\\\"\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(\"img\", {\n    alt: \"gradle_travis\",\n    src: gradle_travis,\n    width: 1274,\n    height: 625\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-none\"\n  }), \"FAILURE   0.0sec, org.p.test.core.LogServerMessagePropertyTest > testWithLogServerErrorDetailDisabled\\n  org.postgresql.util.PSQLException: GSS Authentication failed\\n    at org.postgresql.gss.MakeGSS.authenticate(MakeGSS.java:64)\\n    at org.postgresql.core.v3.ConnectionFactoryImpl.enableGSSEncoded(ConnectionFactoryImpl.java:446)\\n    at org.postgresql.core.v3.ConnectionFactoryImpl.tryConnect(ConnectionFactoryImpl.java:140)\\n    at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:205)\\n    at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:49)\\n    at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:211)\\n    at org.postgresql.Driver.makeConnection(Driver.java:458)\\n    at org.postgresql.Driver.connect(Driver.java:260)\\n    at java.sql.DriverManager.getConnection(DriverManager.java:664)\\n    at java.sql.DriverManager.getConnection(DriverManager.java:208)\\n    at org.postgresql.test.TestUtil.openDB(TestUtil.java:354)\\n    at org.postgresql.test.core.LogServerMessagePropertyTest....(LogServerMessagePropertyTest.java:38)\\n    at org.postgresql.test.core.LogServerMessagePropertyTest....(LogServerMessagePropertyTest.java:95)\\n    Caused by: javax.security.auth.login.LoginException: No LoginModules configured for pgjdbc\\n      at javax.security.auth.login.LoginContext.init(LoginContext.java:264)\\n      at javax.security.auth.login.LoginContext.<init>(LoginContext.java:417)\\n      at org.postgresql.gss.MakeGSS.authenticate(MakeGSS.java:54)\\n      ... 12 more\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2,16\",\n    \"2,16\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"title=\\\"Настраиваем Gradle по-простому\\\"\",\n    \"title\": \"\\\"Настраиваем\",\n    \"Gradle\": true,\n    \"по-простому\\\"\": true\n  }), \"plugins {\\n  // https://github.com/vlsi/vlsi-release-plugins/#gradle-extensions-plugin\\n  id(\\\"com.github.vlsi.gradle-extensions\\\") version \\\"1.70\\\"\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"1:14 title=\\\"Настраиваем Gradle по-своему\\\"\",\n    \"1:14\": true,\n    \"title\": \"\\\"Настраиваем\",\n    \"Gradle\": true,\n    \"по-своему\\\"\": true\n  }), \"tasks {\\n  test {\\n    afterTest(\\n      KotlinClosure2<TestDescriptor, TestResult, Any>({ descriptor, result ->\\n        ...\\n      })\\n    )\\n    afterSuite(\\n      KotlinClosure2<TestDescriptor, TestResult, Any>({ descriptor, result ->\\n        ...\\n      })\\n    )\\n  }\\n}\\n\"))), mdx(\"hr\", null), mdx(\"hr\", null), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u0417\\u0430\\u0447\\u0435\\u043C \\u0432\\u044B \\u043F\\u043E\\u0441\\u0435\\u0442\\u0438\\u043B\\u0438 \\u043D\\u0430\\u0441?\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\u0412 \\u0433\\u043B\\u0443\\u0448\\u0438 \\u0437\\u0430\\u0431\\u044B\\u0442\\u043E\\u0433\\u043E \\u0441\\u0435\\u043B\\u0435\\u043D\\u044C\\u044F\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\u042F \\u043D\\u0438\\u043A\\u043E\\u0433\\u0434\\u0430 \\u043D\\u0435 \\u0437\\u043D\\u0430\\u043B\\u0430 \\u0431 \\u0432\\u0430\\u0441,\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\u041D\\u0435 \\u0437\\u043D\\u0430\\u043B\\u0430 \\u0431 \\u0433\\u043E\\u0440\\u044C\\u043A\\u043E\\u0433\\u043E \\u043C\\u0443\\u0447\\u0435\\u043D\\u044C\\u044F.  \")), mdx(\"p\", null, \"\\u2014 \\u0410. \\u0421. \\u041F\\u0443\\u0448\\u043A\\u0438\\u043D\"), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u0414\\u043E\\u043A\\u0442\\u043E\\u0440, \\u043D\\u043E \\u0443 \\u043C\\u0435\\u043D\\u044F: BDD, Selenide, ...\"), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u0418\\u0449\\u0438\\u0442\\u0435 API \\u0434\\u043B\\u044F \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D\\u0438\\u044F \", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"\\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0439\"), \" \\u0432 \", mdx(\"span\", {\n    style: {\n      color: clrRed\n    }\n  }, \"\\u0432\\u0430\\u0448\\u0435\\u0439\\xA0\\u0431\\u0438\\u0431\\u043B\\u0438\\u043E\\u0442\\u0435\\u043A\\u0435\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"title=\\\"Selenide\\\"\",\n    \"title\": \"\\\"Selenide\\\"\"\n  }), \"$(\\\"div.items\\\")\\n    .shouldHave(\\n        size(3)\\n    )\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"title=\\\"Selenide\\\"\",\n    \"title\": \"\\\"Selenide\\\"\"\n  }), \"$(\\\"div.items\\\")\\n    .shouldHave(\\n        size(3)\\n            .because(\\\"We added 3 items to the cart\\\")\\n    )\\n\"))), mdx(\"hr\", null), mdx(YouTube, {\n    src: vinogradov,\n    link: \"https://www.youtube.com/watch?v=3J6mX98TSjk\",\n    mdxType: \"YouTube\"\n  }), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u0421\\u0442\\u0430\\u0442\\u0438\\u0447\\u0435\\u0441\\u043A\\u0438\\u0439 \\u0430\\u043D\\u0430\\u043B\\u0438\\u0437 \\u2013 \", mdx(\"span\", {\n    style: {\n      color: clrBlue\n    }\n  }, \"\\u0442\\u043E\\u0436\\u0435\"), \" \\u0442\\u0435\\u0441\\u0442\\u044B!\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff2\",\n    \"metastring\": \"view=1:0 title=\\\"Такой порядок импортов?\\\"\",\n    \"view\": \"1:0\",\n    \"title\": \"\\\"Такой\",\n    \"порядок\": true,\n    \"импортов?\\\"\": true\n  }), \"  import static org.junit.Assert.assertTrue;\\n  import static org.junit.Assert.fail;\\n  \\n  import org.junit.platform.commons.util.ReflectionUtils;\\n \\n  import org.postgresql.PGConnection;\\n  import org.postgresql.PGProperty;\\n  import org.postgresql.core.PGStream;\\n  import org.postgresql.core.QueryExecutor;\\n  import java.sql.SQLWarning;\\n  import java.sql.Statement;\\n  import java.util.HashMap;\\n  import java.util.List;\\n  import java.util.Map;\\n  import java.util.Properties;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"view=1:0 title=\\\"А, может, такой?\\\"\",\n    \"view\": \"1:0\",\n    \"title\": \"\\\"А,\",\n    \"может,\": true,\n    \"такой?\\\"\": true\n  }), \"  import org.junit.platform.commons.util.ReflectionUtils;\\n \\n  import org.postgresql.PGConnection;\\n  import org.postgresql.PGProperty;\\n  import org.postgresql.core.PGStream;\\n  import org.postgresql.core.QueryExecutor;\\n  import java.sql.SQLWarning;\\n  import java.sql.Statement;\\n  import java.util.HashMap;\\n  import java.util.List;\\n  import java.util.Map;\\n  import java.util.Properties;\\n\\n  import static org.junit.Assert.assertTrue;\\n  import static org.junit.Assert.fail;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"title=\\\"Вот так говорит CheckStyle\\\"\",\n    \"title\": \"\\\"Вот\",\n    \"так\": true,\n    \"говорит\": true,\n    \"CheckStyle\\\"\": true\n  }), \"  import org.junit.platform.commons.util.ReflectionUtils;\\n \\n  import org.postgresql.PGConnection;\\n  import org.postgresql.PGProperty;\\n  import org.postgresql.core.PGStream;\\n  import org.postgresql.core.QueryExecutor;\\n  import java.sql.SQLWarning;\\n  import java.sql.Statement;\\n  import java.util.HashMap;\\n  import java.util.List;\\n  import java.util.Map;\\n  import java.util.Properties;\\n\\n  import static org.junit.Assert.assertTrue;\\n  import static org.junit.Assert.fail;\\n\\n  3: Wrong order for 'org.junit.platform.commons.util.ReflectionUtils' import.\\n  5: Wrong order for 'org.postgresql.PGConnection' import.\\n  12: Wrong order for 'java.util.List' import.\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"title=\\\"А так говорит Spotless\\\"\",\n    \"title\": \"\\\"А\",\n    \"так\": true,\n    \"говорит\": true,\n    \"Spotless\\\"\": true\n  }), \"  import org.junit.platform.commons.util.ReflectionUtils;\\n \\n  import org.postgresql.PGConnection;\\n  import org.postgresql.PGProperty;\\n  import org.postgresql.core.PGStream;\\n  import org.postgresql.core.QueryExecutor;\\n  import java.sql.SQLWarning;\\n  import java.sql.Statement;\\n  import java.util.HashMap;\\n  import java.util.List;\\n  import java.util.Map;\\n  import java.util.Properties;\\n\\n  import static org.junit.Assert.assertTrue;\\n  import static org.junit.Assert.fail;\\n\\n  3: Wrong order for 'org.junit.platform.commons.util.ReflectionUtils' import.\\n  5: Wrong order for 'org.postgresql.PGConnection' import.\\n  12: Wrong order for 'java.util.List' import.\\n\\nThe following files have format violations:\\n    pgjdbc/src/test/java/org/postgresql/test/jdbc2/ConnectionTest.java\\n      @@ -12,9 +12,6 @@\\n  import static org.junit.Assert.assertTrue;\\n  import static org.junit.Assert.fail;\\n  \\n- import org.junit.platform.commons.util.ReflectionUtils;\\n-\\n- import org.postgresql.PGConnection;\\n  import org.postgresql.PGProperty;\\n  import org.postgresql.core.PGStream;\\n  import org.postgresql.core.QueryExecutor;\\n  import java.sql.SQLWarning;\\n  import java.sql.Statement;\\n  import java.util.HashMap;\\n- import java.util.List;\\n  import java.util.Map;\\n  import java.util.Properties;\\n\\n  Run './gradlew autostyleApply' to fix the violations.\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"\\u0412\\u044B\\u0432\\u043E\\u0434\\u044B\"), mdx(Steps, {\n    mdxType: \"Steps\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u0423\\u043F\\u0430\\u0432\\u0448\\u0438\\u0439 \\u0442\\u0435\\u0441\\u0442 \\u0434\\u043E\\u043B\\u0436\\u0435\\u043D \\u0431\\u044B\\u0442\\u044C \\u043A\\u0430\\u043A \\u0445\\u043E\\u0440\\u043E\\u0448\\u0438\\u0439 \\u0431\\u0430\\u0433-\\u0440\\u0435\\u043F\\u043E\\u0440\\u0442\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u043B\\u044F\\u0439\\u0442\\u0435 \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u044F \\u043A assert'\\u0430\\u043C\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u0414\\u0430\\u0432\\u0430\\u0439\\u0442\\u0435 \\u043F\\u043E\\u043D\\u044F\\u0442\\u043D\\u044B\\u0435 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u044F \\u0442\\u0435\\u0441\\u0442\\u0430\\u043C\"))), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"hr\", null), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"assert... \\u043A\\u0430\\u043A \\u043C\\u043D\\u043E\\u0433\\u043E \\u0432 \\u044D\\u0442\\u043E\\u043C \\u0437\\u0432\\u0443\\u043A\\u0435  \")), mdx(\"p\", null, \"\\u0412\\u043B\\u0430\\u0434\\u0438\\u043C\\u0438\\u0440 \\u0421\\u0438\\u0442\\u043D\\u0438\\u043A\\u043E\\u0432\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/VladimirSitnikv\"\n  }), \"@VladimirSitnikv\")), mdx(\"a\", {\n    href: \"mailto:sitnikov.vladimir@gmail.com\"\n  }, \"sitnikov.vladimir@gmail.com\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"5cb7ac37-dbfb-5793-9839-6db6c719bd7b","slug":"","title":"assert, как много в этом слове"}}}